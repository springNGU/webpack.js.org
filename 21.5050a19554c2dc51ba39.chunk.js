(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{309:function(n,s,a){"use strict";a.r(s),s.default='<p>插件是 webpack 生态的关键部分，\n它为社区用户提供了一种强有力的方式来直接触及 webpack 的编译过程(compilation process)。\n插件能够 <a href="/api/compiler-hooks/#hooks">hook</a> 到每一个编译(compilation)中发出的关键事件中。\n在编译的每个阶段中，插件都拥有对 <code>compiler</code> 对象的完全访问能力，\n并且在合适的时机，还可以访问当前的 <code>compilation</code> 对象。</p>\n<blockquote class="tip">\n<p>关于编写插件的高级介绍，请移步：\n<a href="/contribute/writing-a-plugin">自定义插件</a>。</p>\n</blockquote>\n<p>让我们首先从 tapable 工具开始，\n它为 webpack 插件接口提供了核心能力的。</p>\n<h2 id="tapable">Tapable<a href="#tapable" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>这个小型库是 webpack 的一个核心工具，但也可用于其他地方，\n以提供类似的插件接口。\n在 webpack 中的许多对象都扩展自 <code>Tapable</code> 类。\n它对外暴露了 <code>tap</code>，<code>tapAsync</code> 和 <code>tapPromise</code> 等方法，\n插件可以使用这些方法向 webpack 中注入自定义构建的步骤，这些步骤将在构建过程中触发。</p>\n<p>请查阅<a href="https://github.com/webpack/tapable">文档</a>了解更多知识。\n理解上面的的三种 <code>tap</code> 方法，\n以及提供这些方法的钩子(hooks)对于编写插件来说是至关重要的。\n那些扩展自 <code>Tapable</code> 的对象（例如：compiler），\n以及其提供的钩子(hooks)和每个钩子的类型（例如：<code>同步钩子(SyncHook)</code>）值得关注。</p>\n<h2 id="插件类型">插件类型<a href="#%E6%8F%92%E4%BB%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>根据使用不同的钩子(hooks)和 <code>tap</code> 方法，\n插件可以以多种不同的方式运行。\n这个工作方式与 Tapable 提供的<a href="https://github.com/webpack/tapable#tapable">钩子(hooks)</a>密切相关。\n<a href="/api/compiler-hooks/#hooks">compiler hooks</a> 分别记录了 Tapable 内在的钩子，\n并指出哪些 tap 方法可用。</p>\n<p>所以，依赖于使用的 <code>tap</code> 方法的不同，\n插件可能会以不同的方式运行。\n例如：当你钩入到 <code>编译(compile)</code> 阶段时，只有同步的 <code>tap</code> 方法可以使用。</p>\n<pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compile<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> params <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'以同步方式触及 compile 钩子。\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>然而，对于可以使用 <code>AsyncHook</code> 的 <code>run</code> 阶段，\n则需使用 <code>tapAsync</code> 或 <code>tapPromise</code>（以及 <code>tap</code>）方法。</p>\n<pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> routesList<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'以异步方式触及 run 钩子。\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> routesList<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'以具有延迟的异步方式触及 run 钩子。\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> routesList<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'以具有延迟的异步方式触及 run 钩子。\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>这些需求(story)的含义在于，\n我们可以有多种方式 hook 到 compiler 中，可以让各种插件都以合适的方式去运行。</p>\n<h2 id="自定义钩子">自定义钩子<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%92%A9%E5%AD%90" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>为了便于其他插件的编译过程中可以 <code>tap</code> 到，则需要创建一个新的 hook，\n我们只需要简单的从 <code>tapable</code> 中 <code>require</code> 所需的 hook 类，并创建：</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> SyncHook <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tapable\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SyncHook<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>myCustomHook<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'已存在该钩子\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncompiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>myCustomHook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在你想要触发钩子的位置/时机下调用……</span>\ncompiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>myCustomHook<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>再次声明，\n查看 <code>tapable</code> <a href="https://github.com/webpack/tapable">文档</a> 来了解更多不同的钩子类(hook class)，以及它们是如何工作的。</p>\n<h2 id="进度报告">进度报告<a href="#%E8%BF%9B%E5%BA%A6%E6%8A%A5%E5%91%8A" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>插件能够通过 <a href="/plugins/progress-plugin/"><code>ProgressPlugin</code></a> 这个在默认情况下将信息打印到标准错误输出(stderr)的插件来进行进度报告。如果想要使用这个功能，只需要在使用 <a href="/api/cli/">webpack CLI</a> 的时候传入 <code>--progress</code> 参数。</p>\n<p>如果想要自定义打印输出，只需要传递不同的参数到 <a href="/plugins/progress-plugin/"><code>ProgressPlugin</code></a> 的 <code>reportProgress</code> 方法。</p>\n<p>如果想要报告进度，插件必须在 <code>tap</code> 到 hook 的时候使用 <code>context: true</code> 选项。</p>\n<pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span>\n  context<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> compiler<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reportProgress <span class="token operator">=</span> context <span class="token operator">&#x26;&#x26;</span> context<span class="token punctuation">.</span>reportProgress<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>reportProgress<span class="token punctuation">)</span> <span class="token function">reportProgress</span><span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">,</span> <span class="token string">\'Starting work\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>reportProgress<span class="token punctuation">)</span> <span class="token function">reportProgress</span><span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">,</span> <span class="token string">\'Done work\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code>reportProgress</code> 方法在被调用的时候会传入以下的参数：</p>\n<pre><code class="hljs language-js"><span class="token function">reportProgress</span><span class="token punctuation">(</span>percentage<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<ul>\n<li><code>percentage</code>：此参数未使用。作为代替，<a href="/plugins/progress-plugin/"><code>ProgressPlugin</code></a> 插件会基于当前的钩子(hook)计算进度。</li>\n<li><code>...args</code>：任意数量的字符串，这些字符串会传递给 <code>ProgressPlugin</code> 插件并报告给用户。</li>\n</ul>\n<p>注意：只有 compiler 和 compilation 钩子的子集才支持 <code>reportProgress</code> 方法。请查看 <a href="/plugins/progress-plugin/#supported-hooks"><code>ProgressPlugin</code></a> 了解更多信息。</p>\n<h2 id="日志">日志<a href="#%E6%97%A5%E5%BF%97" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>日志的 API 在 webpack 4.37 版本后提供支持。当 <code>logging</code> 在 <a href="/configuration/stats/#statslogging"><code>统计配置(stats configuration)</code></a>中可用和(或)当 <a href="/configuration/other-options/#infrastructurelogging"><code>infrastructure logging</code></a> 可用的时候，插件会通过各自的记录格式(stats，infrastructure)打印信息。</p>\n<ul>\n<li>插件可以使用 <code>compilation.getLogger(\'PluginName\')</code> 来做记录。这种形式的记录保存在统计数据(Stats)中并做相应的格式化。它能够被用户过滤和导出。</li>\n<li>插件也可以使用 <code>compilation.getInfrastructureLogger(\'PluginName\')</code> 来做记录。使用 <code>infrastructure</code> 的形式并不会被保存在统计数据(Stats)中，因此也不会被格式化。它通常直接将记录载入到 console/dashboard/GUI 中。它能够被用户过滤。</li>\n<li>插件也可以使用特殊的降级逻辑 <code>compilation.getLogger ? compilation.getLogger(\'PluginName\') : console</code> 来检测是否支持记录，以此来在不支持 <code>compilation.getLogger</code> 方法的旧版本 webpack 中提供降级方法。</li>\n</ul>\n<h2 id="下一步">下一步<a href="#%E4%B8%8B%E4%B8%80%E6%AD%A5" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>查看 <a href="/api/compiler-hooks/">compiler hooks</a> 部分，\n了解所有可用的 <code>compiler</code> 钩子以及它们提供的参数的详细列表。</p>\n'}}]);