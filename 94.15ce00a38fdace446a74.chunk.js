(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{386:function(n,s,a){"use strict";a.r(s),s.default='<p>应用于 webpack 的 bundle loader</p>\n<h2 id="安装">安装<a href="#%E5%AE%89%E8%A3%85" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> i bundle-loader --save</code></pre>\n<h2 id="用法">用法<a href="#%E7%94%A8%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>当你引用 bundle-loader 时，chunk 会被请求。</p>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span><span class="token punctuation">;</span></code></pre>\n<p>需要使用异步处理，\n以使得 chunk 在浏览器加载（以及在获取其导出）时可用。</p>\n<pre><code class="hljs language-js"><span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 按需引入文件</span>\n  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>上述代码会将 <code>require(\'file.js\')</code> 包裹在一段 <code>require.ensure</code> 代码块中。</p>\n<p>可以添加多个回调函数，这些回调函数会按照添加的顺序依次执行。</p>\n<pre><code class="hljs language-js"><span class="token function">bundle</span><span class="token punctuation">(</span>callbackTwo<span class="token punctuation">)</span>\n<span class="token function">bundle</span><span class="token punctuation">(</span>callbackThree<span class="token punctuation">)</span></code></pre>\n<p>当依赖模块都加载完毕时, 如果此时添加一个回调函数，回到函数将会立即执行。</p>\n<h2 id="选项">选项<a href="#%E9%80%89%E9%A1%B9" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n<thead>\n<tr>\n<th align="center">选项名</th>\n<th align="center">类型</th>\n<th align="center">默认值</th>\n<th align="left">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>选项名</p><p>类型</p><p>默认值</p><p>描述</p></div>\n<div class="content"><p><strong><code>lazy</code></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">异步加载导入的 bundle</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>选项名</p><p>类型</p><p>默认值</p><p>描述</p></div>\n<div class="content"><p><strong><code>name</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>[id].[name]</code></td>\n<td align="left">为导入的 bundle 配置自定义文件名</td>\n</tr>\n</tbody>\n</table>\n<h3 id="lazy"><code>lazy</code><a href="#lazy" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>当使用 <code>bundle-loader</code> 时，文件会被请求(request)。如果想让文件按需加载(request it lazy)，请使用：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n\n<span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<blockquote>\n<p>ℹ️ 只有调用 load 函数时，chunk 才会被请求(request)</p>\n</blockquote>\n<h3 id="name"><code>name</code><a href="#name" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>可以通过配置中 <code>name</code> 选项参数，来设置 bundle 的名称。\n请查阅相关<a href="https://github.com/webpack/loader-utils#interpolatename">文档</a>。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[name]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>:warning: 一旦 loader 创建了 chunk，将遵循以下命名规则 <a href="/configuration/output/#outputchunkfilename"><code>output.chunkFilename</code></a> 规则，\n默认是 <code>[id].[name]</code>。这里 <code>[name]</code> 对应着配置中 name 选项参数设置的 chunk 名称。</p>\n</blockquote>\n<h2 id="示例">示例<a href="#%E7%A4%BA%E4%BE%8B" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> <span class="token string">\'./App.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dest\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 此处可以自定义其他格式</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">\'[name].[id].js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'my-chunk\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>一般情况下，chunk 会使用上面的 <code>filename</code> 规则，并根据其对应的 <code>[chunkname]</code> 命名。</p>\n<p>然而，来自 <code>bundle-loader</code> 中的 chunk 会使用 <code>chunkFilename</code> 规则命名。因此，打包后的示例文件最终将生成为 <code>my-chunk.1.js</code> 和 <code>file-2.js</code>。</p>\n<p>当然，你也可以在 <code>chunkFilename</code> 添加哈希值作为文件名的一部分，这是因为在 bundle 的配置选项中放置 <code>[hash]</code> 不会生效。</p>\n<h2 id="维护人员">维护人员<a href="#%E7%BB%B4%E6%8A%A4%E4%BA%BA%E5%91%98" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n  <tbody>\n    <tr>\n      <td align="center">\n        <a href="https://github.com/bebraw">\n          <img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150">\n          </br>\n          Juho Vepsäläinen\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/d3viant0ne">\n          <img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150">\n          </br>\n          Joshua Wiens\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/michael-ciniawsky">\n          <img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150">\n          </br>\n          Michael Ciniawsky\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/evilebottnawi">\n          <img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150">\n          </br>\n          Alexander Krasnoyarov\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n'}}]);