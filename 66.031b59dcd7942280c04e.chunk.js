(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{358:function(n,s,e){"use strict";e.r(s),s.default='<p>如果你是从开始一直在沿用指南的示例，现在会有一个小项目，显示 "Hello webpack"。现在我们尝试混合一些其他资源，比如 images，看看 webpack 如何处理。</p>\n<p>在 webpack 出现之前，前端开发人员会使用 grunt 和 gulp 等工具来处理资源，并将它们从 <code>/src</code> 文件夹移动到 <code>/dist</code> 或 <code>/build</code> 目录中。JavaScript 模块也遵循同样方式，但是，像 webpack 这样的工具，将<strong>动态打包</strong>所有依赖（创建所谓的 <a href="/concepts/dependency-graph">依赖图(dependency graph)</a>）。这是极好的创举，因为现在每个模块都可以<em>明确表述它自身的依赖</em>，可以避免打包未使用的模块。</p>\n<p>webpack 最出色的功能之一就是，除了引入 JavaScript，还可以通过 loader <em>引入任何其他类型的文件</em>。也就是说，以上列出的那些 JavaScript 的优点（例如显式依赖），同样可以用来构建 web 站点或 web 应用程序中的所有非 JavaScript 内容。让我们从 CSS 开始起步，或许你可能已经熟悉了下面这些设置。</p>\n<h2 id="设置">设置<a href="#%E8%AE%BE%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在开始之前，让我们对项目做一个小的修改：</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="hljs language-diff">  &#x3C;!doctype html>\n  &#x3C;html>\n    &#x3C;head>\n<span class="token deleted">-    &#x3C;title>起步&#x3C;/title></span>\n<span class="token inserted">+    &#x3C;title>管理资源&#x3C;/title></span>\n    &#x3C;/head>\n    &#x3C;body>\n<span class="token deleted">-     &#x3C;script src="main.js">&#x3C;/script></span>\n<span class="token inserted">+     &#x3C;script src="bundle.js">&#x3C;/script></span>\n    &#x3C;/body>\n  &#x3C;/html></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n<span class="token deleted">-     filename: \'main.js\',</span>\n<span class="token inserted">+     filename: \'bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\'),\n    },\n  };</code></pre>\n<h2 id="加载-css">加载 CSS<a href="#%E5%8A%A0%E8%BD%BD-css" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>为了在 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要安装 <a href="/loaders/style-loader">style-loader</a> 和 <a href="/loaders/css-loader">css-loader</a>，并在 <a href="/configuration/module"><code>module</code> 配置</a> 中添加这些 loader：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'style-loader\',</span>\n<span class="token inserted">+           \'css-loader\',</span>\n<span class="token inserted">+         ],</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+     ],</span>\n<span class="token inserted">+   },</span>\n  };</code></pre>\n<blockquote class="tip">\n<p>webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这个示例中，所有以 <code>.css</code> 结尾的文件，都将被提供给 <code>style-loader</code> 和 <code>css-loader</code>。</p>\n</blockquote>\n<p>这使你可以在依赖于此样式的 js 文件中 <code>import \'./style.css\'</code>。现在，在此模块执行过程中，含有 CSS 字符串的 <code>&#x3C;style></code> 标签，将被插入到 html 文件的 <code>&#x3C;head></code> 中。</p>\n<p>我们尝试一下，通过在项目中添加一个新的 <code>style.css</code> 文件，并将其 import 到我们的 <code>index.js</code> 中：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- style.css</span>\n    |- index.js\n  |- /node_modules</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="hljs language-css"><span class="token selector">.hello</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import \'./style.css\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    // lodash 是由当前 script 脚本 import 导入进来的\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.classList.add(\'hello\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<p>现在运行 build 命令：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n    Asset      Size  Chunks             Chunk Names\nbundle.js  76.4 KiB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nEntrypoint main <span class="token operator">=</span> bundle.js\n<span class="token punctuation">..</span>.</code></pre>\n<p>再次在浏览器中打开 <code>index.html</code>，你应该看到 <code>Hello webpack</code> 现在的样式是红色。要查看 webpack 做了什么，请检查页面（不要查看页面源代码，它不会显示结果，因为 <code>&#x3C;style></code> 标签是由 JavaScript 动态创建的），并查看页面的 head 标签。它应该包含 style 块元素，也就是我们在 <code>index.js</code> 中 import 的 css 文件中的样式。</p>\n<p>注意，在多数情况下，你也可以进行 <a href="/plugins/mini-css-extract-plugin/#minimizing-for-production">压缩 CSS</a>，以便在生产环境中节省加载时间。最重要的是，现有的 loader 可以支持任何你可以想到的 CSS 风格 - <a href="/loaders/postcss-loader">postcss</a>, <a href="/loaders/sass-loader">sass</a> 和 <a href="/loaders/less-loader">less</a> 等。</p>\n<h2 id="加载-images-图像">加载 images 图像<a href="#%E5%8A%A0%E8%BD%BD-images-%E5%9B%BE%E5%83%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>假想，现在我们正在下载 CSS，但是像 background 和 icon 这样的图像，要如何处理呢？使用 <a href="/loaders/file-loader">file-loader</a>，我们可以轻松地将这些内容混合到 CSS 中：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev file-loader</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ],\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\',</span>\n<span class="token inserted">+         ],</span>\n<span class="token inserted">+       },</span>\n      ],\n    },\n  };</code></pre>\n<p>现在，在 <code>import MyImage from \'./my-image.png\'</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。在使用 <a href="/loaders/css-loader">css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(\'./my-image.png\')</code>。loader 会识别这是一个本地文件，并将 <code>\'./my-image.png\'</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。而 <a href="/loaders/html-loader">html-loader</a> 以相同的方式处理 <code>&#x3C;img src="./my-image.png" /></code>。</p>\n<p>我们向项目添加一个图像，然后看它是如何工作的，你可以使用任何你喜欢的图像：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- icon.png</span>\n    |- style.css\n    |- index.js\n  |- /node_modules</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n<span class="token inserted">+ import Icon from \'./icon.png\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    // lodash，现在由此脚本导入\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n<span class="token inserted">+   // 将图像添加到我们已经存在的 div 中。</span>\n<span class="token inserted">+   const myIcon = new Image();</span>\n<span class="token inserted">+   myIcon.src = Icon;</span>\n<span class="token inserted">+</span>\n<span class="token inserted">+   element.appendChild(myIcon);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="hljs language-diff">  .hello {\n    color: red;\n<span class="token inserted">+   background: url(\'./icon.png\');</span>\n  }</code></pre>\n<p>重新构建并再次打开 index.html 文件：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n                               Asset      Size  Chunks                    Chunk Names\nda4574bb234ddc4bb47cbe1ca4b20303.png  3.01 MiB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>\n                           bundle.js  76.7 KiB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nEntrypoint main <span class="token operator">=</span> bundle.js\n<span class="token punctuation">..</span>.</code></pre>\n<p>如果一切顺利，你现在应该看到你的 icon 图标成为了重复的背景图，以及 <code>Hello webpack</code> 文本旁边的 <code>img</code> 元素。如果检查此元素，你将看到实际的文件名已更改为 <code>5c999da72346a995e7e2718865d019c8.png</code>。这意味着 webpack 在 <code>src</code> 文件夹中找到我们的文件，并对其进行了处理！</p>\n<blockquote class="tip">\n<p>合乎逻辑下一步是，压缩和优化你的图像。查看 <a href="https://github.com/tcoopman/image-webpack-loader">image-webpack-loader</a> 和 <a href="/loaders/url-loader">url-loader</a>，以了解更多关于如何增强加载处理图像功能。</p>\n</blockquote>\n<h2 id="加载-fonts-字体">加载 fonts 字体<a href="#%E5%8A%A0%E8%BD%BD-fonts-%E5%AD%97%E4%BD%93" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>那么，像字体这样的其他资源如何处理呢？file-loader 和 url-loader 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，也包括字体。让我们更新 <code>webpack.config.js</code> 来处理字体文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ],\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\',\n          ],\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\',</span>\n<span class="token inserted">+         ],</span>\n<span class="token inserted">+       },</span>\n      ],\n    },\n  };</code></pre>\n<p>在项目中添加一些字体文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- my-font.woff</span>\n<span class="token inserted">+   |- my-font.woff2</span>\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules</code></pre>\n<p>配置好 loader 并将字体文件放在合适的位置后，你可以通过一个 <code>@font-face</code> 声明将其混合。本地的 <code>url(...)</code> 指令会被 webpack 获取处理，就像它处理图片一样：</p>\n<p><strong>src/style.css</strong></p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ @font-face {</span>\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n<span class="token inserted">+   src:  url(\'./my-font.woff2\') format(\'woff2\'),</span>\n<span class="token inserted">+         url(\'./my-font.woff\') format(\'woff\');</span>\n<span class="token inserted">+   font-weight: 600;</span>\n<span class="token inserted">+   font-style: normal;</span>\n<span class="token inserted">+ }</span>\n\n  .hello {\n    color: red;\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n    background: url(\'./icon.png\');\n  }</code></pre>\n<p>现在，让我们重新构建，然后看下 webpack 是否处理了我们的字体：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n                                 Asset      Size  Chunks                    Chunk Names\n5439466351d432b73fdb518c6ae9654a.woff2  19.5 KiB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n 387c65cc923ad19790469cfb5b7cb583.woff  23.4 KiB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n  da4574bb234ddc4bb47cbe1ca4b20303.png  3.01 MiB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>\n                             bundle.js    77 KiB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nEntrypoint main <span class="token operator">=</span> bundle.js\n<span class="token punctuation">..</span>.</code></pre>\n<p>重新打开 <code>index.html</code> 看看我们的 <code>Hello webpack</code> 文本显示是否换上了新的字体。如果一切顺利，你应该能看到变化。</p>\n<h2 id="加载数据">加载数据<a href="#%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>此外，可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from \'./data.json\'</code> 默认将正常运行。要导入 CSV、TSV 和 XML，你可以使用 <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> 和 <a href="https://github.com/gisikw/xml-loader">xml-loader</a>。让我们处理加载这三类文件：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev csv-loader xml-loader</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ],\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\',\n          ],\n        },\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/,\n          use: [\n            \'file-loader\',\n          ],\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(csv|tsv)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'csv-loader\',</span>\n<span class="token inserted">+         ],</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.xml$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'xml-loader\',</span>\n<span class="token inserted">+         ],</span>\n<span class="token inserted">+       },</span>\n      ],\n    },\n  };</code></pre>\n<p>在项目中添加一些数据文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- data.xml</span>\n    |- my-font.woff\n    |- my-font.woff2\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules</code></pre>\n<p><strong>src/data.xml</strong></p>\n<pre><code class="hljs language-xml"><span class="token prolog">&#x3C;?xml version="1.0" encoding="UTF-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>note</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>to</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>to</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>from</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>heading</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>Call Cindy on Tuesday<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>note</span><span class="token punctuation">></span></span></code></pre>\n<p>现在，你可以 <code>import</code> 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 <code>Data</code> 变量，将包含可直接使用的已解析 JSON：</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n  import Icon from \'./icon.png\';\n<span class="token inserted">+ import Data from \'./data.xml\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    // lodash，现在通过 script 标签导入\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n    // 将图像添加到我们已经存在的 div 中。\n    const myIcon = new Image();\n    myIcon.src = Icon;\n\n    element.appendChild(myIcon);\n\n<span class="token inserted">+   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<p>重新执行 <code>npm run build</code> 命令，然后打开 <code>index.html</code>。查看开发者工具中的控制台，你应该能够看到导入的数据会被打印出来！</p>\n<blockquote class="tip">\n<p>在使用 <a href="https://github.com/d3">d3</a> 等工具实现某些数据可视化时，这个功能极其有用。可以不用在运行时再去发送一个 ajax 请求获取和解析数据，而是在构建过程中将其提前加载到模块中，以便浏览器加载模块后，直接就可以访问解析过的数据。</p>\n</blockquote>\n<blockquote class="warning">\n<p>只有在使用 JSON 模块默认导出时会没有警告。</p>\n</blockquote>\n<pre><code class="hljs language-javascript"><span class="token comment">// 没有警告</span>\n<span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">\'./data.json\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 显示警告，规范不允许这样做。</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./data.json\'</span><span class="token punctuation">;</span></code></pre>\n<h2 id="全局资源">全局资源<a href="#%E5%85%A8%E5%B1%80%E8%B5%84%E6%BA%90" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>上述所有内容中最出色之处在于，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。无需依赖于含有全部资源的 <code>/assets</code> 目录，而是将资源与代码组合在一起使用。例如，类似这样的结构会非常有用：</p>\n<pre><code class="hljs language-diff"><span class="token deleted">- |- /assets</span>\n<span class="token inserted">+ |– /components</span>\n<span class="token inserted">+ |  |– /my-component</span>\n<span class="token inserted">+ |  |  |– index.jsx</span>\n<span class="token inserted">+ |  |  |– index.css</span>\n<span class="token inserted">+ |  |  |– icon.svg</span>\n<span class="token inserted">+ |  |  |– img.png</span></code></pre>\n<p>这种配置方式会使你的代码更具备可移植性，因为现有的集中放置的方式会让所有资源紧密耦合起来。假如你想在另一个项目中使用  <code>/my-component</code>，只需将其复制或移动到 <code>/components</code> 目录下。只要你已经安装过全部<em>外部依赖</em>，并且<em>已经在配置中定义过相同的 loader</em>，那么项目应该能够良好运行。</p>\n<p>但是，假如你只能被局限在旧有开发方式，或者你有一些在多个组件（视图、模板、模块等）之间共享的资源。你仍然可以将这些资源存储在一个基本目录(base directory)中，甚至配合使用 <a href="/configuration/resolve/#resolvealias">alias</a> 来使它们更方便 <code>import 导入</code>。</p>\n<h2 id="回退处理">回退处理<a href="#%E5%9B%9E%E9%80%80%E5%A4%84%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>对于下篇指南，我们无需使用本指南中所有用到的资源，因此我们会进行一些清理工作，以便为下篇指南 <a href="/guides/output-management/">管理输出</a> 做好准备：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token deleted">-   |- data.xml</span>\n<span class="token deleted">-   |- my-font.woff</span>\n<span class="token deleted">-   |- my-font.woff2</span>\n<span class="token deleted">-   |- icon.png</span>\n<span class="token deleted">-   |- style.css</span>\n    |- index.js\n  |- /node_modules</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n<span class="token deleted">-   module: {</span>\n<span class="token deleted">-     rules: [</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.css$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'style-loader\',</span>\n<span class="token deleted">-           \'css-loader\',</span>\n<span class="token deleted">-         ],</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\',</span>\n<span class="token deleted">-         ],</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\',</span>\n<span class="token deleted">-         ],</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(csv|tsv)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'csv-loader\',</span>\n<span class="token deleted">-         ],</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.xml$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'xml-loader\',</span>\n<span class="token deleted">-         ],</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-     ],</span>\n<span class="token deleted">-   },</span>\n  };</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n<span class="token deleted">- import \'./style.css\';</span>\n<span class="token deleted">- import Icon from \'./icon.png\';</span>\n<span class="token deleted">- import Data from \'./data.xml\';</span>\n<span class="token deleted">-</span>\n  function component() {\n    const element = document.createElement(\'div\');\n<span class="token deleted">-</span>\n<span class="token deleted">-   // lodash，现在通过 script 标签导入</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.classList.add(\'hello\');</span>\n<span class="token deleted">-</span>\n<span class="token deleted">-   // 将图像添加到我们已经存在的 div 中。</span>\n<span class="token deleted">-   const myIcon = new Image();</span>\n<span class="token deleted">-   myIcon.src = Icon;</span>\n<span class="token deleted">-</span>\n<span class="token deleted">-   element.appendChild(myIcon);</span>\n<span class="token deleted">-</span>\n<span class="token deleted">-   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<h2 id="下篇指南">下篇指南<a href="#%E4%B8%8B%E7%AF%87%E6%8C%87%E5%8D%97" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>我们继续移步到 <a href="/guides/output-management/">管理输出</a></p>\n<h2 id="延伸阅读">延伸阅读<a href="#%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<ul>\n<li><a href="https://survivejs.com/webpack/loading/fonts/">加载字体</a> on SurviveJS</li>\n</ul>\n'}}]);