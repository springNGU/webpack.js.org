(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{306:function(e,n,a){"use strict";a.r(n),n.default='<p>本章节涵盖了使用 webpack 编译的代码中所有的 <strong>变量</strong>。模块将通过 <code>module</code> 和其他变量，来访问编译过程中的某些数据。</p>\n<h3 id="moduleloaded-nodejs"><code>module.loaded</code> (NodeJS)<a href="#moduleloaded-nodejs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>false</code> 表示该模块正在执行， <code>true</code> 表示同步执行已经完成。</p>\n<h3 id="modulehot-webpack-specific"><code>module.hot</code> (webpack-specific)<a href="#modulehot-webpack-specific" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>表示 <a href="/concepts/hot-module-replacement">模块热替换(Hot Module Replacement)</a> 是否启用，并给进程提供一个接口。详细说明请查看 <a href="/api/hot-module-replacement">模块热替换 API 页面</a>。</p>\n<h3 id="moduleid-commonjs"><code>module.id</code> (CommonJS)<a href="#moduleid-commonjs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>当前模块的 ID。</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>id <span class="token operator">===</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./file.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="moduleexports-commonjs"><code>module.exports</code> (CommonJS)<a href="#moduleexports-commonjs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>调用者通过 <code>require</code> 对模块进行调用时返回的值（默认为一个新对象）。</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>无法在异步函数中访问该变量。</p>\n</blockquote>\n<h3 id="exports-commonjs"><code>exports</code> (CommonJS)<a href="#exports-commonjs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>该变量默认值为 <code>module.exports</code>（即一个对象）。 如果 <code>module.exports</code> 被重写的话， <code>exports</code> 不再会被导出。</p>\n<pre><code class="hljs language-javascript">exports<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>anObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span><span class="token function-variable function">aFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="global-nodejs"><code>global</code> (NodeJS)<a href="#global-nodejs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>见 <a href="https://nodejs.org/api/globals.html#globals_global">node.js global</a>.</p>\n<h3 id="process-nodejs"><code>process</code> (NodeJS)<a href="#process-nodejs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>见 <a href="https://nodejs.org/api/process.html">node.js process</a>.</p>\n<h3 id="__dirname-nodejs"><code>__dirname</code> (NodeJS)<a href="#__dirname-nodejs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>取决于 <code>node.__dirname</code> 配置选项：</p>\n<ul>\n<li><code>false</code>: 未定义</li>\n<li><code>mock</code>: 等同于 <code>\'/\'</code></li>\n<li><code>true</code>: <a href="https://nodejs.org/api/globals.html#globals_dirname">node.js __dirname</a></li>\n</ul>\n<p>如果在一个被 Parser 解析的表达式内部使用，则配置选项会被当作 <code>true</code> 处理。</p>\n<h3 id="__filename-nodejs"><code>__filename</code> (NodeJS)<a href="#__filename-nodejs" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>取决于 <code>node.__filename</code> 配置选项：</p>\n<ul>\n<li><code>false</code>: 未定义</li>\n<li><code>mock</code>: 等同于 <code>\'/index.js\'</code></li>\n<li><code>true</code>: <a href="https://nodejs.org/api/globals.html#globals_filename">node.js __filename</a></li>\n</ul>\n<p>如果在一个被 Parser 解析的表达式内部使用，则配置选项会被当作 <code>true</code> 处理。</p>\n<h3 id="__resourcequery-webpack-特有变量"><code>__resourceQuery</code> (webpack 特有变量)<a href="#__resourcequery-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>当前模块的资源查询(resource query) 。如果进行了如下的 <code>reqiure</code> 调用，那么查询字符串(query string)在<code>file.js</code> 中可访问。</p>\n<pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file.js?test\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-javascript">__resourceQuery <span class="token operator">===</span> <span class="token string">\'?test\'</span><span class="token punctuation">;</span></code></pre>\n<h3 id="__webpack_public_path__-webpack-特有变量"><code>__webpack_public_path__</code> (webpack 特有变量)<a href="#__webpack_public_path__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>等同于 <code>output.publicPath</code> 配置选项。</p>\n<h3 id="__webpack_require__-webpack-特有变量"><code>__webpack_require__</code> (webpack 特有变量)<a href="#__webpack_require__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>原始 require 函数。这个表达式不会被解析器解析为依赖。</p>\n<h3 id="__webpack_chunk_load__-webpack-特有变量"><code>__webpack_chunk_load__</code> (webpack 特有变量)<a href="#__webpack_chunk_load__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>内部 chunk 载入函数，有两个输入参数：</p>\n<ul>\n<li><code>chunkId</code> 需要载入的 chunk id。</li>\n<li><code>callback(require)</code> chunk 载入后调用的回调函数。</li>\n</ul>\n<h3 id="__webpack_modules__-webpack-特有变量"><code>__webpack_modules__</code> (webpack 特有变量)<a href="#__webpack_modules__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>访问所有模块的内部对象。</p>\n<h3 id="__webpack_hash__-webpack-特有变量"><code>__webpack_hash__</code> (webpack 特有变量)<a href="#__webpack_hash__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>这个变量只有在启用 <code>HotModuleReplacementPlugin</code> 或者 <code>ExtendedAPIPlugin</code> 时才生效。这个变量提供对编译过程中(compilation)的 hash 信息的获取。</p>\n<h3 id="__non_webpack_require__-webpack-特有变量"><code>__non_webpack_require__</code> (webpack 特有变量)<a href="#__non_webpack_require__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>生成一个不会被 webpack 解析的 <code>require</code> 函数。配合全局可以获取到的 require 函数，可以完成一些酷炫操作。</p>\n<h3 id="__webpack_exports_info__-webpack-特有变量"><code>__webpack_exports_info__</code> (webpack 特有变量)<a href="#__webpack_exports_info__-webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>在模块中, <code>__webpack_exports_info__</code> 可以被获取到，以便导出模块用以自我检查：</p>\n<ul>\n<li>\n<p><code>__webpack_exports_info__</code> 总是 <code>true</code></p>\n</li>\n<li>\n<p>当导出模块未被使用时 <code>__webpack_exports_info__.&#x3C;exportName>.used</code> 为 <code>false</code>, 否则是 <code>true</code></p>\n</li>\n<li>\n<p><code>__webpack_exports_info__.&#x3C;exportName>.useInfo</code> 是</p>\n<ul>\n<li><code>false</code> 当导出模块未被使用</li>\n<li><code>true</code> 当导出模块被使用</li>\n<li><code>null</code> 当导出模块的使用情况取决于运行时的条件</li>\n<li><code>undefined</code> 当没有可用信息时</li>\n</ul>\n</li>\n<li>\n<p><code>__webpack_exports_info__.&#x3C;exportName>.provideInfo</code> 是</p>\n<ul>\n<li><code>false</code> 当导出模块没有被提供</li>\n<li><code>true</code> 当导出模块被提供</li>\n<li><code>null</code> 当导出模块的提供情况取决于运行时的条件</li>\n<li><code>undefined</code> 当没有可用信息时</li>\n</ul>\n</li>\n<li>\n<p>可以从嵌套的 exports 中得到相关信息: 例如 <code>__webpack_exports_info__.&#x3C;exportName>.&#x3C;exportName>.&#x3C;exportName>.used</code></p>\n</li>\n</ul>\n<h3 id="debug--webpack-特有变量"><code>DEBUG</code>  (webpack 特有变量)<a href="#debug--webpack-%E7%89%B9%E6%9C%89%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>等同于 <code>debug</code> 配置选项。</p>\n'}}]);