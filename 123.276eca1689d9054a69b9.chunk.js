(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{415:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/worker-loader"><img src="https://img.shields.io/npm/v/worker-loader.svg" alt="npm"></a>\n<a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/worker-loader.svg" alt="node"></a>\n<a href="https://david-dm.org/webpack-contrib/worker-loader"><img src="https://david-dm.org/webpack-contrib/worker-loader.svg" alt="deps"></a>\n<a href="https://github.com/webpack-contrib/worker-loader/actions"><img src="https://github.com/webpack-contrib/worker-loader/workflows/worker-loader/badge.svg" alt="tests"></a>\n<a href="https://codecov.io/gh/webpack-contrib/worker-loader"><img src="https://codecov.io/gh/webpack-contrib/worker-loader/branch/master/graph/badge.svg" alt="coverage"></a>\n<a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a>\n<a href="https://packagephobia.now.sh/result?p=worker-loader"><img src="https://packagephobia.now.sh/badge?p=worker-loader" alt="size"></a></p>\n<p>webpack 的 worker loader 模块</p>\n<h2 id="快速开始">快速开始<a href="#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>开始之前你需要安装 <code>worker-loader</code> ：</p>\n<pre><code class="hljs language-console">$ npm install worker-loader --save-dev\n</code></pre>\n<h3 id="内敛">内敛<a href="#%E5%86%85%E6%95%9B" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>App.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'worker-loader!./Worker.js\'</span><span class="token punctuation">;</span></code></pre>\n<h3 id="配置">配置<a href="#%E9%85%8D%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>App.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>然后，通过你的首选方式去运行 <code>webpack</code>。</p>\n<h2 id="选项">选项<a href="#%E9%80%89%E9%A1%B9" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="fallback"><code>fallback</code><a href="#fallback" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>类型： <code>Boolean</code>\n默认值： <code>false</code></p>\n<p>是否需要支持非 worker 环境的回退。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> fallback<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="inline"><code>inline</code><a href="#inline" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>类型： <code>Boolean</code>\n默认值： <code>false</code></p>\n<p>你也可以使用 <code>inline</code> 参数，将 worker 内联为一个 BLOB。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><em>注意：内联模式还会为不支持内联 worker 的浏览器创建 chunk， 要禁用此行为，只需将  <code>fallback</code> 参数设置为 <code>false</code>。</em></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="name"><code>name</code><a href="#name" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>类型： <code>String</code>\n默认值： <code>[hash].worker.js</code></p>\n<p>使用 <code>name</code> 参数，为输出的脚本设置一个自定义名称。\n名称可能含有 <code>[hash]</code> 字符串，为了缓存会被替换为依赖内容哈希值。\n只使用 <code>name</code> 时，<code>[hash]</code> 会被忽略。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'WorkerName.[hash].js\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="publicpath">publicPath<a href="#publicpath" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>类型： <code>String</code>\n默认值： <code>null</code></p>\n<p>重写 worker 脚本的下载路径。\n如果未指定， 则使用与其他 webpack 资源相同的公共路径。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/scripts/workers/\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="workertype">workerType<a href="#workertype" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>string</code>\nDefault: <code>Worker</code></p>\n<p>Set the worker type. Defaults to <code>Worker</code>. Supports <code>ServiceWorker</code>, <code>SharedWorker</code>.</p>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="basic">Basic<a href="#basic" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>worker 文件可以像其他文件导入依赖那样来导入依赖：</p>\n<p><strong>Worker.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="集成-es-模块">集成 ES 模块<a href="#%E9%9B%86%E6%88%90-es-%E6%A8%A1%E5%9D%97" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><em>注意：如果配置好 <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> ， 你甚至可以使用 ES2015 模块。</em></p>\n<p><strong>Worker.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="集成-typescript">集成 TypeScript<a href="#%E9%9B%86%E6%88%90-typescript" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>为了集成 TypeScript，在导出 worker 时，你需要声明一个自定义模块。</p>\n<p><strong>typings/worker-loader.d.ts</strong></p>\n<pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">\'worker-loader!*\'</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">export</span> <span class="token keyword">default</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>Worker.ts</strong></p>\n<pre><code class="hljs language-typescript"><span class="token keyword">const</span> ctx<span class="token punctuation">:</span> Worker <span class="token operator">=</span> self <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 发送数据到父线程</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 响应父线程的消息</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><strong>App.ts</strong></p>\n<pre><code class="hljs language-typescript"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'worker-loader!./Worker\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="跨域策略">跨域策略<a href="#%E8%B7%A8%E5%9F%9F%E7%AD%96%E7%95%A5" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"><code>WebWorkers</code></a> 受到 <a href="https://en.wikipedia.org/wiki/Same-origin_policy">同源策略</a> 的限制， 如果 <code>webpack</code> 资源的访问服务和应用程序不是同源，浏览器就会拦截其下载。\n如果在 CDN 域下托管资源， 通常就会出现这种情况。\n甚至从 <code>webpack-dev-server</code> 下载时都会被拦截。\n有两种解决方法：</p>\n<p>第一种，通过配置 <a href="#inline"><code>inline</code></a> 参数，将 worker 作为 blob 内联， 而不是将其作为外部脚本下载</p>\n<p><strong>App.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>第二种，通过配置 <a href="#publicpath"><code>publicPath</code></a> 选项， 重写 worker 脚本的基础下载 URL</p>\n<p><strong>App.js</strong></p>\n<pre><code class="hljs language-js"><span class="token comment">// 这会使 worker 从 `/workers/file.worker.js` 下载</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/workers/\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>如果你从未阅读过我们的贡献指南，请在上面花点时间。</p>\n<p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/LICENSE">MIT</a></p>\n'}}]);