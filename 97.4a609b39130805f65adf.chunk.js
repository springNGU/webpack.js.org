(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{389:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/css-loader"><img src="https://img.shields.io/npm/v/css-loader.svg" alt="npm"></a>\n<a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/css-loader.svg" alt="node"></a>\n<a href="https://david-dm.org/webpack-contrib/css-loader"><img src="https://david-dm.org/webpack-contrib/css-loader.svg" alt="deps"></a>\n<a href="https://github.com/webpack-contrib/css-loader/actions"><img src="https://github.com/webpack-contrib/css-loader/workflows/css-loader/badge.svg" alt="tests"></a>\n<a href="https://codecov.io/gh/webpack-contrib/css-loader"><img src="https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg" alt="coverage"></a>\n<a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a>\n<a href="https://packagephobia.now.sh/result?p=css-loader"><img src="https://packagephobia.now.sh/badge?p=css-loader" alt="size"></a></p>\n<p>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</p>\n<h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To begin, you\'ll need to install <code>css-loader</code>:</p>\n<pre><code class="hljs language-console">npm install --save-dev css-loader\n</code></pre>\n<p>Then add the plugin to your <code>webpack</code> config. For example:</p>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Good loaders for requiring your assets are the <a href="/loaders/file-loader/">file-loader</a> and the <a href="/loaders/url-loader/">url-loader</a> which you should specify in your config (see <a href="https://github.com/webpack-contrib/css-loader#assets">below</a>).</p>\n<p>And run <code>webpack</code> via your preferred method.</p>\n<h3 id="tostring"><code>toString</code><a href="#tostring" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>You can also use the css-loader results directly as a string, such as in Angular\'s component style.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'to-string-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>or</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span></code></pre>\n<p>If there are SourceMaps, they will also be included in the result string.</p>\n<p>If, for one reason or another, you need to extract CSS as a\nplain string resource (i.e. not wrapped in a JS module) you\nmight want to check out the <a href="https://github.com/peerigon/extract-loader">extract-loader</a>.\nIt\'s useful when you, for instance, need to post process the CSS as a string.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'handlebars-loader\'</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader expects raw resource string</span>\n          <span class="token string">\'extract-loader\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#url"><code>url</code></a></strong><p class="description mobile"><code>{Boolean\\|Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|Function}</code></td>\n<td align="center"><code>true</code></td>\n<td align="left">Enables/Disables \n<code>url</code>\n/\n<code>image-set</code>\n functions handling</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#import"><code>import</code></a></strong><p class="description mobile"><code>{Boolean\\|Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|Function}</code></td>\n<td align="center"><code>true</code></td>\n<td align="left">Enables/Disables \n<code>@import</code>\n at-rules handling</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#modules"><code>modules</code></a></strong><p class="description mobile"><code>{Boolean\\|String\\|Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|String\\|Object}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enables/Disables CSS Modules and their configuration</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#sourcemap"><code>sourceMap</code></a></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enables/Disables generation of source maps</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#importloaders"><code>importLoaders</code></a></strong><p class="description mobile"><code>{Number}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Number}</code></td>\n<td align="center"><code>0</code></td>\n<td align="left">Enables/Disables or setups number of loaders applied before CSS loader</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#localsconvention"><code>localsConvention</code></a></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>\'asIs\'</code></td>\n<td align="left">Style of exported classnames</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#onlylocals"><code>onlyLocals</code></a></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Export only locals</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#esmodule"><code>esModule</code></a></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Use ES modules syntax</td>\n</tr>\n</tbody>\n</table>\n<h3 id="url"><code>url</code><a href="#url" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean|Function</code>\nDefault: <code>true</code></p>\n<p>Enables/Disables <code>url</code>/<code>image-set</code> functions handling.\nControl <code>url()</code> resolving. Absolute URLs and root-relative URLs are not resolving.</p>\n<p>Examples resolutions:</p>\n<pre><code>url(image.png) => require(\'./image.png\')\nurl(\'image.png\') => require(\'./image.png\')\nurl(./image.png) => require(\'./image.png\')\nurl(\'./image.png\') => require(\'./image.png\')\nurl(\'http://dontwritehorriblecode.com/2112.png\') => require(\'http://dontwritehorriblecode.com/2112.png\')\nimage-set(url(\'image2x.png\') 1x, url(\'image1x.png\') 2x) => require(\'./image1x.png\') and require(\'./image2x.png\')\n</code></pre>\n<p>To import assets from a <code>node_modules</code> path (include <code>resolve.modules</code>) and for <code>alias</code>, prefix it with a <code>~</code>:</p>\n<pre><code>url(~module/image.png) => require(\'module/image.png\')\nurl(\'~module/image.png\') => require(\'module/image.png\')\nurl(~aliasDirectory/image.png) => require(\'otherDirectory/image.png\')\n</code></pre>\n<h4 id="boolean"><code>Boolean</code><a href="#boolean" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Enable/disable <code>url()</code> resolving.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          url<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="function"><code>Function</code><a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Allow to filter <code>url()</code>. All filtered <code>url()</code> will not be resolved (left in the code as they were written).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          url<span class="token punctuation">:</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> resourcePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// resourcePath - path to css file</span>\n\n            <span class="token comment">// Don\'t handle `img.png` urls</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'img.png\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="import"><code>import</code><a href="#import" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean|Function</code>\nDefault: <code>true</code></p>\n<p>Enables/Disables <code>@import</code> at-rules handling.\nControl <code>@import</code> resolving. Absolute urls in <code>@import</code> will be moved in runtime code.</p>\n<p>Examples resolutions:</p>\n<pre><code>@import \'style.css\' => require(\'./style.css\')\n@import url(style.css) => require(\'./style.css\')\n@import url(\'style.css\') => require(\'./style.css\')\n@import \'./style.css\' => require(\'./style.css\')\n@import url(./style.css) => require(\'./style.css\')\n@import url(\'./style.css\') => require(\'./style.css\')\n@import url(\'http://dontwritehorriblecode.com/style.css\') => @import url(\'http://dontwritehorriblecode.com/style.css\') in runtime\n</code></pre>\n<p>To import styles from a <code>node_modules</code> path (include <code>resolve.modules</code>) and for <code>alias</code>, prefix it with a <code>~</code>:</p>\n<pre><code>@import url(~module/style.css) => require(\'module/style.css\')\n@import url(\'~module/style.css\') => require(\'module/style.css\')\n@import url(~aliasDirectory/style.css) => require(\'otherDirectory/style.css\')\n</code></pre>\n<h4 id="boolean-1"><code>Boolean</code><a href="#boolean-1" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Enable/disable <code>@import</code> resolving.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token keyword">import</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="function-1"><code>Function</code><a href="#function-1" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Allow to filter <code>@import</code>. All filtered <code>@import</code> will not be resolved (left in the code as they were written).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token keyword">import</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>parsedImport<span class="token punctuation">,</span> resourcePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// parsedImport.url - url of `@import`</span>\n            <span class="token comment">// parsedImport.media - media query of `@import`</span>\n            <span class="token comment">// resourcePath - path to css file</span>\n\n            <span class="token comment">// Don\'t handle `style.css` import</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedImport<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'style.css\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="modules"><code>modules</code><a href="#modules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean|String|Object</code>\nDefault: <code>false</code></p>\n<p>Enables/Disables CSS Modules and their configuration.</p>\n<p>The <code>modules</code> option enables/disables the <strong><a href="https://github.com/css-modules/css-modules">CSS Modules</a></strong> specification and setup basic behaviour.</p>\n<p>Using <code>false</code> value increase performance because we avoid parsing <strong>CSS Modules</strong> features, it will be useful for developers who use vanilla css or use other technologies.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="features"><code>Features</code><a href="#features" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<h5 id="scope"><code>Scope</code><a href="#scope" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Using <code>local</code> value requires you to specify <code>:global</code> classes.\nUsing <code>global</code> value requires you to specify <code>:local</code> classes.\nUsing <code>pure</code> value requires selectors must contain at least one local class or id.</p>\n<p>You can find more information <a href="https://github.com/css-modules/css-modules">here</a>.</p>\n<p>Styles can be locally scoped to avoid globally scoping styles.</p>\n<p>The syntax <code>:local(.className)</code> can be used to declare <code>className</code> in the local scope. The local identifiers are exported by the module.</p>\n<p>With <code>:local</code> (without brackets) local mode can be switched on for this selector.\nThe <code>:global(.className)</code> notation can be used to declare an explicit global selector.\nWith <code>:global</code> (without brackets) global mode can be switched on for this selector.</p>\n<p>The loader replaces local selectors with unique identifiers. The chosen unique identifiers are exported by the module.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local(.className .subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className .subClass :global(.global-class-name)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>ℹ️ Identifiers are exported</p>\n</blockquote>\n<pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>CamelCase is recommended for local selectors. They are easier to use within the imported JS module.</p>\n<p>You can use <code>:local(#someId)</code>, but this is not recommended. Use classes instead of ids.</p>\n<h5 id="composing"><code>Composing</code><a href="#composing" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>When declaring a local classname you can compose a local class from another local classname.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">:local(.subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>This doesn\'t result in any change to the CSS itself but exports multiple classnames.</p>\n<pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h5 id="importing"><code>Importing</code><a href="#importing" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>To import a local classname from another module.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.continueButton)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'library/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">:local(.nameEdit)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To import from multiple modules use multiple <code>composes:</code> rules.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'module/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h5 id="values"><code>Values</code><a href="#values" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>You can use <code>@value</code> to specific values to be reused throughout a document.</p>\n<p>We recommend use prefix <code>v-</code> for values, <code>s-</code> for selectors and <code>m-</code> for media at-rules.</p>\n<pre><code class="hljs language-css"><span class="token atrule"><span class="token rule">@value</span> <span class="token property">v-primary</span><span class="token punctuation">:</span> #BF4040<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">s-black</span><span class="token punctuation">:</span> black-selector<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">m-large</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> v-primary<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.s-black</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> m-large</span> <span class="token punctuation">{</span>\n  <span class="token selector">.header</span> <span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h4 id="boolean-2"><code>Boolean</code><a href="#boolean-2" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Enable <strong>CSS Modules</strong> features.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="string"><code>String</code><a href="#string" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Enable <strong>CSS Modules</strong> features and setup <code>mode</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Using `local` value has same effect like using `modules: true`</span>\n          modules<span class="token punctuation">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="object"><code>Object</code><a href="#object" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Enable <strong>CSS Modules</strong> features and setup options for them.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            mode<span class="token punctuation">:</span> <span class="token string">\'local\'</span><span class="token punctuation">,</span>\n            exportGlobals<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span><span class="token punctuation">,</span>\n            context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            hashPrefix<span class="token punctuation">:</span> <span class="token string">\'my-custom-hash\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="auto"><code>auto</code><a href="#auto" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>Boolean|RegExp|Function</code>\nDefault: <code>\'undefined\'</code></p>\n<p>Allows auto enable css modules based on filename.</p>\n<h6 id="boolean-3"><code>Boolean</code><a href="#boolean-3" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Possible values:</p>\n<ul>\n<li><code>true</code> - enable css modules for all files for which <code>/\\.module\\.\\w+$/i.test(filename)</code> return true</li>\n<li><code>false</code> - disable css modules</li>\n</ul>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            auto<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h6 id="regexp"><code>RegExp</code><a href="#regexp" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Enable css modules for files based on the filename satisfying your regex check.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            auto<span class="token punctuation">:</span> <span class="token regex">/\\.custom-module\\.\\w+$/i</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h6 id="function-2"><code>Function</code><a href="#function-2" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Enable css modules for files based on the filename satisfying your filter function check.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            auto<span class="token punctuation">:</span> <span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span> <span class="token operator">=></span> resourcePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.custom-module.css\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="mode"><code>mode</code><a href="#mode" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>String|Function</code>\nDefault: <code>\'local\'</code></p>\n<p>Setup <code>mode</code> option. You can omit the value when you want <code>local</code> mode.</p>\n<h6 id="string-1"><code>String</code><a href="#string-1" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Possible values - <code>local</code>, <code>global</code>, and <code>pure</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            mode<span class="token punctuation">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h6 id="function-3"><code>Function</code><a href="#function-3" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Allows set different values for the <code>mode</code> option based on a filename</p>\n<p>Possible return values - <code>local</code>, <code>global</code>, and <code>pure</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Callback must return "local", "global", or "pure" values</span>\n            mode<span class="token punctuation">:</span> <span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/pure.css$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">\'pure\'</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/global.css$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">\'global\'</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">return</span> <span class="token string">\'local\'</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="exportglobals"><code>exportGlobals</code><a href="#exportglobals" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Allow <code>css-loader</code> to export names from global class or id, so you can use that as local name.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            exportGlobals<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="localidentname"><code>localIdentName</code><a href="#localidentname" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>String</code>\nDefault: <code>\'[hash:base64]\'</code></p>\n<p>You can configure the generated ident with the <code>localIdentName</code> query parameter.\nSee <a href="https://github.com/webpack/loader-utils#interpolatename">loader-utils\'s documentation</a> for more information on options.</p>\n<p>Recommendations:</p>\n<ul>\n<li>use <code>\'[path][name]__[local]\'</code> for development</li>\n<li>use <code>\'[hash:base64]\'</code> for production</li>\n</ul>\n<p>The <code>[local]</code> placeholder contains original class.</p>\n<p><strong>Note:</strong> all reserved (<code>&#x3C;>:"/\\|?*</code>) and control filesystem characters (excluding characters in the <code>[local]</code> placeholder) will be converted to <code>-</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="context"><code>context</code><a href="#context" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Allow to redefine basic loader context for local ident name.\nBy default we use <code>rootContext</code> of loader.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'context\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="hashprefix"><code>hashPrefix</code><a href="#hashprefix" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Allow to add custom hash to generate more unique classes.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            hashPrefix<span class="token punctuation">:</span> <span class="token string">\'hash\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="getlocalident"><code>getLocalIdent</code><a href="#getlocalident" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<p>You can also specify the absolute path to your custom <code>getLocalIdent</code> function to generate classname based on a different schema.\nBy default we use built-in function to generate a classname.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            getLocalIdent<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token string">\'whatever_random_class_name\'</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="localidentregexp"><code>localIdentRegExp</code><a href="#localidentregexp" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Type: <code>String|RegExp</code>\nDefault: <code>undefined</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            localIdentRegExp<span class="token punctuation">:</span> <span class="token regex">/page-(.*)\\.css/i</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="sourcemap"><code>sourceMap</code><a href="#sourcemap" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Enables/Disables generation of source maps.</p>\n<p>To include source maps set the <code>sourceMap</code> option.</p>\n<p>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="importloaders"><code>importLoaders</code><a href="#importloaders" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Number</code>\nDefault: <code>0</code></p>\n<p>Enables/Disables or setups number of loaders applied before CSS loader.</p>\n<p>The option <code>importLoaders</code> allows you to configure how many loaders before <code>css-loader</code> should be applied to <code>@import</code>ed resources.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n              <span class="token comment">// 0 => no loaders (default);</span>\n              <span class="token comment">// 1 => postcss-loader;</span>\n              <span class="token comment">// 2 => postcss-loader, sass-loader</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>This may change in the future when the module system (i. e. webpack) supports loader matching by origin.</p>\n<h3 id="localsconvention"><code>localsConvention</code><a href="#localsconvention" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>String</code>\nDefault: <code>\'asIs\'</code></p>\n<p>Style of exported classnames.</p>\n<p>By default, the exported JSON keys mirror the class names (i.e <code>asIs</code> value).</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'asIs\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Class names will be exported as is.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'camelCase\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Class names will be camelized, the original class name will not to be removed from the locals</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'camelCaseOnly\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Class names will be camelized, the original class name will be removed from the locals</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dashes\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Only dashes in class names will be camelized</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dashesOnly\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Dashes in class names will be camelized, the original class name will be removed from the locals</td>\n</tr>\n</tbody>\n</table>\n<p><strong>file.css</strong></p>\n<pre><code class="hljs language-css"><span class="token selector">.class-name</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          localsConvention<span class="token punctuation">:</span> <span class="token string">\'camelCase\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="onlylocals"><code>onlyLocals</code><a href="#onlylocals" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Export only locals.</p>\n<p><strong>Useful</strong> when you use <strong>css modules</strong> for pre-rendering (for example SSR).\nFor pre-rendering with <code>mini-css-extract-plugin</code> you should use this option instead of <code>style-loader!css-loader</code> <strong>in the pre-rendering bundle</strong>.\nIt doesn\'t embed CSS but only exports the identifier mappings.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          onlyLocals<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="esmodule"><code>esModule</code><a href="#esmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>By default, <code>css-loader</code> generates JS modules that use the CommonJS modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of <a href="/plugins/module-concatenation-plugin/">module concatenation</a> and <a href="/guides/tree-shaking/">tree shaking</a>.</p>\n<p>You can enable a ES module syntax using:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="assets">Assets<a href="#assets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The following <code>webpack.config.js</code> can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as <a href="https://tools.ietf.org/html/rfc2397">Data URLs</a> and copy larger files to the output directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="extract">Extract<a href="#extract" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>For production builds it\'s recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on.</p>\n<ul>\n<li>\n<p>This can be achieved by using the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a> to extract the CSS when running in production mode.</p>\n</li>\n<li>\n<p>As an alternative, if seeking better development performance and css outputs that mimic production. <a href="https://github.com/faceyspacey/extract-css-chunks-webpack-plugin">extract-css-chunks-webpack-plugin</a> offers a hot module reload friendly, extended version of mini-css-extract-plugin. HMR real CSS files in dev, works like mini-css in non-dev</p>\n</li>\n</ul>\n<h3 id="pure-css-css-modules-and-postcss">Pure CSS, CSS modules and PostCSS<a href="#pure-css-css-modules-and-postcss" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>When you have pure CSS (without CSS modules), CSS modules and PostCSS in your project you can use this setup:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// For pure CSS - /\\.css$/i,</span>\n        <span class="token comment">// For Sass/SCSS - /\\.((c|sa|sc)ss)$/i,</span>\n        <span class="token comment">// For Less - /\\.((c|le)ss)$/i,</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.((c|sa|sc)ss)$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// Run `postcss-loader` on each CSS `@import`, do not forget that `sass-loader` compile non CSS `@import`\'s into a single file</span>\n              <span class="token comment">// If you need run `sass-loader` and `postcss-loader` on each CSS `@import` please set it to `2`</span>\n              importLoaders<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              <span class="token comment">// Automatically enable css modules for files satisfying `/\\.module\\.\\w+$/i` RegExp.</span>\n              modules<span class="token punctuation">:</span> <span class="token punctuation">{</span> auto<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stage<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// Can be `less-loader`</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p>\n<p><a href="https://github.com/webpack-contrib/css-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack-contrib/css-loader/blob/master/LICENSE">MIT</a></p>\n'}}]);