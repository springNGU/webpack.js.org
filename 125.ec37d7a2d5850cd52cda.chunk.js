(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{417:function(n,s,a){"use strict";a.r(s),s.default='<p>这篇指南仅仅展示了影响用户使用的主要改变。更多细节查看 <a href="https://github.com/webpack/webpack/releases">更新日志(the changelog)</a>。</p>\n<h2 id="nodejs-v4">Node.js v4<a href="#nodejs-v4" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>如果你正在使用 Node.js 的 V4 或 V4 以下版本，需要更新你的 Node.js 至 V6 或者更高版本</p>\n<p>更新 Node.js 版本的说明见 <a href="https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version">这里</a>。</p>\n<h2 id="脚手架（cli）">脚手架（CLI）<a href="#%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%88cli%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>脚手架 (CLI) 已经放至一个单独的  webpack-cli 中。在你使用 webpack 之前需要安装它，参见<a href="/guides/getting-started/#basic-setup">基础步骤</a>.</p>\n<p>安装指南见<a href="/guides/installation">这里</a>。</p>\n<h2 id="更新插件">更新插件<a href="#%E6%9B%B4%E6%96%B0%E6%8F%92%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>为了兼容 webpack4，许多第三方插件需要更新至最新版本。一些流行的插件链接见<a href="https://github.com/webpack-contrib/awesome-webpack#webpack-plugins">这里</a>。</p>\n<h2 id="模式（mode）">模式（mode）<a href="#%E6%A8%A1%E5%BC%8F%EF%BC%88mode%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在你的配置中添加新的 <a href="/configuration/mode/"><code>模式 （mode）</code></a> 选项。设置它为 <code>\'production\'</code>, <code>\'development\'</code> or <code>\'无 (none)\'</code> </p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n<span class="token inserted">+  mode: \'production\',</span>\n}</code></pre>\n<p>注：<code>\'development\'</code> 模式和 <code>\'production\'</code> 模式的用途不同。你可以使用 <a href="/guides/production/#setup">操作指南</a> 中的 <code>webpack-merge</code> 来优化配置。</p>\n<h2 id="不推荐或被移除的插件">不推荐或被移除的插件<a href="#%E4%B8%8D%E6%8E%A8%E8%8D%90%E6%88%96%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E6%8F%92%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>生产模式中已经默认集成了部分插件，这部分默认插件可以在配置中被移除：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n  plugins: [\n<span class="token deleted">-    new NoEmitOnErrorsPlugin(),</span>\n<span class="token deleted">-    new ModuleConcatenationPlugin(),</span>\n<span class="token deleted">-    new DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("production") })</span>\n<span class="token deleted">-    new UglifyJsPlugin()</span>\n  ],\n}</code></pre>\n<p>在开发模式中，这些插件已默认安装</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n  plugins: [\n<span class="token deleted">-    new NamedModulesPlugin()</span>\n  ],\n}</code></pre>\n<p>这些插件不推荐并且现在已经删除</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n  plugins: [\n<span class="token deleted">-    new NoErrorsPlugin(),</span>\n<span class="token deleted">-    new NewWatchingPlugin()</span>\n  ],\n}</code></pre>\n<h2 id="commonschunkplugin">CommonsChunkPlugin<a href="#commonschunkplugin" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>CommonsChunkPlugin</code> 已被移除。可以使用 <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> 来代替。</p>\n<p>查阅 <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> 文档了解更多相关细节。其默认配置可能已经满足你的需求。</p>\n<p>注：当计算生成 HTML 时，你可以使用 <code>optimization.splitChunks.chunks: "all"</code>， 该优化配置在较多项目中被使用。</p>\n<h2 id="import-和-commonjs">import() 和 CommonJS<a href="#import-%E5%92%8C-commonjs" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在 webpack 4 中，当使用 <code>import()</code> 去加载非标准 ESM 时，其值已经被加载. 现在你需要通过 <code>default</code> 属性来得到 <code>module.exports</code> 中的取值。</p>\n<p><strong>non-esm.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sayHello<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'hello world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>example.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./non-esm.js\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=></span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="json-和-loaders">json 和 loaders<a href="#json-%E5%92%8C-loaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>当使用自定义 loader 去转化 <code>.json</code> 文件时，你需要更改模块中的 <code>type</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n  rules: [\n    {\n      test: /config\\.json$/,\n      loader: \'special-loader\',\n<span class="token inserted">+     type: \'javascript/auto\',</span>\n      options: {...}\n    }\n  ]\n};</code></pre>\n<p>仍在使用的 <code>json-loader</code> 可从项目中移除。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">module.exports = {\n  // ...\n  rules: [\n    {\n<span class="token deleted">-     test: /\\.json$/,</span>\n<span class="token deleted">-     loader: \'json-loader\'</span>\n    }\n  ]\n};</code></pre>\n<h2 id="moduleloaders">module.loaders<a href="#moduleloaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>自 webpack 2 后 <code>module.loaders</code> 不推荐使用，目前其已被移除，并推荐使用 <a href="/configuration/module/#rule"><code>module.rules</code></a>。</p>\n'}}]);