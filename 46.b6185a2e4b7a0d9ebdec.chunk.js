(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{337:function(n,e,s){"use strict";s.r(e),e.default='<p>提供 <code>mode</code> 配置选项，告知 webpack 使用相应模式的内置优化。</p>\n<p><code>string = \'production\': \'none\' | \'development\' | \'production\'</code></p>\n<h2 id="用法">用法<a href="#%E7%94%A8%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>只需在配置对象中提供 <code>mode</code> 选项：</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token punctuation">:</span> <span class="token string">\'development\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>或者从 <a href="/api/cli/">CLI</a> 参数中传递：</p>\n<pre><code class="hljs language-bash">webpack --mode<span class="token operator">=</span>development</code></pre>\n<p>支持以下字符串值：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>development</code><p class="description mobile">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code>. 启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code> 。</p></p></div></td>\n<td class="description desktop">会将 \n<code>DefinePlugin</code>\n 中 \n<code>process.env.NODE_ENV</code>\n 的值设置为 \n<code>development</code>\n. 启用 \n<code>NamedChunksPlugin</code>\n 和 \n<code>NamedModulesPlugin</code>\n 。</td>\n</tr>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>production</code><p class="description mobile">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>. 启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>TerserPlugin</code> 。</p></p></div></td>\n<td class="description desktop">会将 \n<code>DefinePlugin</code>\n 中 \n<code>process.env.NODE_ENV</code>\n 的值设置为 \n<code>production</code>\n. 启用 \n<code>FlagDependencyUsagePlugin</code>\n, \n<code>FlagIncludedChunksPlugin</code>\n, \n<code>ModuleConcatenationPlugin</code>\n, \n<code>NoEmitOnErrorsPlugin</code>\n, \n<code>OccurrenceOrderPlugin</code>\n, \n<code>SideEffectsFlagPlugin</code>\n 和 \n<code>TerserPlugin</code>\n 。</td>\n</tr>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>none</code><p class="description mobile">不使用任何默认优化选项</p></p></div></td>\n<td class="description desktop">不使用任何默认优化选项</td>\n</tr>\n</tbody>\n</table>\n<p>如果没有设置，webpack 会给 <code>mode</code> 的默认值设置为 <code>production</code>。</p>\n<blockquote class="tip">\n<p>请注意，设置 <code>NODE_ENV</code> 并不会自动地设置 <code>mode</code>。</p>\n</blockquote>\n<h3 id="mode-development">Mode: development<a href="#mode-development" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-diff">// webpack.development.config.js\nmodule.exports = {\n<span class="token inserted">+ mode: \'development\'</span>\n<span class="token deleted">- devtool: \'eval\',</span>\n<span class="token deleted">- cache: true,</span>\n<span class="token deleted">- performance: {</span>\n<span class="token deleted">-   hints: false</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- output: {</span>\n<span class="token deleted">-   pathinfo: true</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- optimization: {</span>\n<span class="token deleted">-   namedModules: true,</span>\n<span class="token deleted">-   namedChunks: true,</span>\n<span class="token deleted">-   nodeEnv: \'development\',</span>\n<span class="token deleted">-   flagIncludedChunks: false,</span>\n<span class="token deleted">-   occurrenceOrder: false,</span>\n<span class="token deleted">-   concatenateModules: false,</span>\n<span class="token deleted">-   splitChunks: {</span>\n<span class="token deleted">-     hidePathInfo: false,</span>\n<span class="token deleted">-     minSize: 10000,</span>\n<span class="token deleted">-     maxAsyncRequests: Infinity,</span>\n<span class="token deleted">-     maxInitialRequests: Infinity,</span>\n<span class="token deleted">-   },</span>\n<span class="token deleted">-   noEmitOnErrors: false,</span>\n<span class="token deleted">-   checkWasmTypes: false,</span>\n<span class="token deleted">-   minimize: false,</span>\n<span class="token deleted">-   removeAvailableModules: false</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- plugins: [</span>\n<span class="token deleted">-   new webpack.NamedModulesPlugin(),</span>\n<span class="token deleted">-   new webpack.NamedChunksPlugin(),</span>\n<span class="token deleted">-   new webpack.DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("development") }),</span>\n<span class="token deleted">- ]</span>\n}</code></pre>\n<h3 id="mode-production">Mode: production<a href="#mode-production" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-diff">// webpack.production.config.js\nmodule.exports = {\n<span class="token inserted">+  mode: \'production\',</span>\n<span class="token deleted">- performance: {</span>\n<span class="token deleted">-   hints: \'warning\'</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- output: {</span>\n<span class="token deleted">-   pathinfo: false</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- optimization: {</span>\n<span class="token deleted">-   namedModules: false,</span>\n<span class="token deleted">-   namedChunks: false,</span>\n<span class="token deleted">-   nodeEnv: \'production\',</span>\n<span class="token deleted">-   flagIncludedChunks: true,</span>\n<span class="token deleted">-   occurrenceOrder: true,</span>\n<span class="token deleted">-   concatenateModules: true,</span>\n<span class="token deleted">-   splitChunks: {</span>\n<span class="token deleted">-     hidePathInfo: true,</span>\n<span class="token deleted">-     minSize: 30000,</span>\n<span class="token deleted">-     maxAsyncRequests: 5,</span>\n<span class="token deleted">-     maxInitialRequests: 3,</span>\n<span class="token deleted">-   },</span>\n<span class="token deleted">-   noEmitOnErrors: true,</span>\n<span class="token deleted">-   checkWasmTypes: true,</span>\n<span class="token deleted">-   minimize: true,</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- plugins: [</span>\n<span class="token deleted">-   new TerserPlugin(/* ... */),</span>\n<span class="token deleted">-   new webpack.DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("production") }),</span>\n<span class="token deleted">-   new webpack.optimize.ModuleConcatenationPlugin(),</span>\n<span class="token deleted">-   new webpack.NoEmitOnErrorsPlugin()</span>\n<span class="token deleted">- ]</span>\n}</code></pre>\n<h3 id="mode-none">Mode: none<a href="#mode-none" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-diff">// webpack.custom.config.js\nmodule.exports = {\n<span class="token inserted">+ mode: \'none\',</span>\n<span class="token deleted">- performance: {</span>\n<span class="token deleted">-  hints: false</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- optimization: {</span>\n<span class="token deleted">-   flagIncludedChunks: false,</span>\n<span class="token deleted">-   occurrenceOrder: false,</span>\n<span class="token deleted">-   concatenateModules: false,</span>\n<span class="token deleted">-   splitChunks: {</span>\n<span class="token deleted">-     hidePathInfo: false,</span>\n<span class="token deleted">-     minSize: 10000,</span>\n<span class="token deleted">-     maxAsyncRequests: Infinity,</span>\n<span class="token deleted">-     maxInitialRequests: Infinity,</span>\n<span class="token deleted">-   },</span>\n<span class="token deleted">-   noEmitOnErrors: false,</span>\n<span class="token deleted">-   checkWasmTypes: false,</span>\n<span class="token deleted">-   minimize: false,</span>\n<span class="token deleted">- },</span>\n<span class="token deleted">- plugins: []</span>\n}</code></pre>\n<p>如果要根据 <em>webpack.config.js</em> 中的 <strong>mode</strong> 变量更改打包行为，则必须将配置导出为函数，而不是导出对象：</p>\n<pre><code class="hljs language-javascript"><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'development\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">\'source-map\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}}]);