(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{371:function(n,e,s){"use strict";s.r(e),e.default='<blockquote class="tip">\n<p>本指南继续沿用 <a href="/guides/development">开发环境</a> 指南中的代码示例。</p>\n</blockquote>\n<p>模块热替换(hot module replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新所有类型的模块，\n而无需完全刷新。本页面重点介绍其 <strong>实现</strong>，而 <a href="/concepts/hot-module-replacement">概念</a> 页面提供了更多关于\n它的工作原理以及为什么它有用的细节。</p>\n<blockquote class="warning">\n<p><strong>HMR</strong> 不适用于生产环境，这意味着它应当用于开发环境。更多详细信息，\n请查看 <a href="/guides/production">生产环境</a> 指南。</p>\n</blockquote>\n<h2 id="启用-hmr">启用 HMR<a href="#%E5%90%AF%E7%94%A8-hmr" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>此功能可以很大程度提高生产效率。我们要做的就是更新 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 配置，\n然后使用 webpack 内置的 HMR 插件。我们还要删除掉 <code>print.js</code> 的入口起点，\n因为现在已经在 <code>index.js</code> 模块中引用了它。</p>\n<blockquote class="tip">\n<p>如果你在技术选型中使用了 <code>webpack-dev-middleware</code> 而没有使用 <code>webpack-dev-server</code>，请使用 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 依赖包，以在你的自定义服务器或应用程序上启用 HMR。</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n       app: \'./src/index.js\',\n<span class="token deleted">-      print: \'./src/print.js\',</span>\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n<span class="token inserted">+     hot: true,</span>\n    },\n    plugins: [\n      // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\',\n      }),\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n  };</code></pre>\n<blockquote class="tip">\n<p>你可以通过以下命令来修改 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>\n的配置：<code>webpack-dev-server --hotOnly</code>。</p>\n</blockquote>\n<p>现在，我们来修改 <code>index.js</code> 文件，以便当 <code>print.js</code> 内部发生变更时可以告诉 webpack 接受更新的模块。</p>\n<p><strong>index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    const element = document.createElement(\'div\');\n    const btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n<span class="token inserted">+</span>\n<span class="token inserted">+ if (module.hot) {</span>\n<span class="token inserted">+   module.hot.accept(\'./print.js\', function() {</span>\n<span class="token inserted">+     console.log(\'Accepting the updated printMe module!\');</span>\n<span class="token inserted">+     printMe();</span>\n<span class="token inserted">+   })</span>\n<span class="token inserted">+ }</span></code></pre>\n<p>更改 <code>print.js</code> 中 <code>console.log</code> 的输出内容，你将会在浏览器中看到如下的输出\n（不要担心现在 <code>button.onclick = printMe()</code> 的输出，我们稍后也会更新该部分）。</p>\n<p><strong>print.js</strong></p>\n<pre><code class="hljs language-diff">  export default function printMe() {\n<span class="token deleted">-   console.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   console.log(\'Updating print.js...\');</span>\n  }</code></pre>\n<p><strong>console</strong></p>\n<pre><code class="hljs language-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted">+ 2main.js:4395 [WDS] App updated. Recompiling...</span>\n<span class="token inserted">+ main.js:4395 [WDS] App hot update...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Checking for updates on the server...</span>\n<span class="token inserted">+ main.js:10024 Accepting the updated printMe module!</span>\n<span class="token inserted">+ 0.4b8ee77….hot-update.js:10 Updating print.js...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Updated modules:</span>\n<span class="token inserted">+ main.js:4330 [HMR]  - 20</span></code></pre>\n<h2 id="通过-nodejs-api">通过 Node.js API<a href="#%E9%80%9A%E8%BF%87-nodejs-api" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在 Node.js API 中使用 webpack dev server 时，不要将 dev server 选项放在 webpack 配置对象中。而是在创建时，\n将其作为第二个参数传递。例如：</p>\n<p><code>new WebpackDevServer(compiler, options)</code></p>\n<p>想要启用 HMR，还需要修改 webpack 配置对象，使其包含 HMR 入口起点。<code>webpack-dev-server</code> 依赖包中具有一个叫做 <code>addDevServerEntrypoints</code> 的方法，你可以通过使用这个方法来实现。这是关于如何使用的一个基本示例：</p>\n<p><strong>dev-server.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token punctuation">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>如果你正在使用 <a href="/guides/development#using-webpack-dev-middleware"><code>webpack-dev-middleware</code></a>，可以通过 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 依赖包，在自定义 dev server 中启用 HMR。</p>\n</blockquote>\n<h2 id="问题">问题<a href="#%E9%97%AE%E9%A2%98" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>模块热替换可能比较难以掌握。为了说明这一点，我们回到刚才的示例中。如果你继续点击示例页面上的按钮，\n你会发现控制台仍在打印旧的 <code>printMe</code> 函数。</p>\n<p>这是因为按钮的 <code>onclick</code> 事件处理函数仍然绑定在旧的 <code>printMe</code> 函数上。</p>\n<p>为了让 HMR 正常工作，我们需要更新代码，使用 <code>module.hot.accept</code> 将其绑定到新的 <code>printMe</code> 函数上：</p>\n<p><strong>index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    const element = document.createElement(\'div\');\n    const btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick event is bind to the original printMe function\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n<span class="token deleted">- document.body.appendChild(component());</span>\n<span class="token inserted">+ let element = component(); // 存储 element，以在 print.js 修改时重新渲染</span>\n<span class="token inserted">+ document.body.appendChild(element);</span>\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n<span class="token deleted">-     printMe();</span>\n<span class="token inserted">+     document.body.removeChild(element);</span>\n<span class="token inserted">+     element = component(); // 重新渲染 "component"，以便更新 click 事件处理函数</span>\n<span class="token inserted">+     document.body.appendChild(element);</span>\n    })\n  }</code></pre>\n<p>这仅仅是一个示例，还有很多让人易于犯错的情况。\n幸运的是，有很多 loader（下面会提到一些）可以使得模块热替换变得更加容易。</p>\n<h2 id="hmr-加载样式">HMR 加载样式<a href="#hmr-%E5%8A%A0%E8%BD%BD%E6%A0%B7%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>借助于 <code>style-loader</code>，使用模块热替换来加载 CSS 实际上极其简单。此 loader 在幕后使用了 <code>module.hot.accept</code>，在 CSS 依赖模块更新之后，会将其 patch(修补) 到 <code>&#x3C;style></code> 标签中。</p>\n<p>首先使用以下命令安装两个 loader ：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre>\n<p>然后更新配置文件，使用这两个 loader。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n      hot: true,\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [\'style-loader\', \'css-loader\'],</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+     ],</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n       // 对于 CleanWebpackPlugin 的 v2 versions 以下版本，使用 new CleanWebpackPlugin([\'dist/*\'])\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\',\n      }),\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n  };</code></pre>\n<p>如同 import 模块，热加载样式表同样很简单：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  | - package.json\n  | - webpack.config.js\n  | - /dist\n    | - bundle.js\n  | - /src\n    | - index.js\n    | - print.js\n<span class="token inserted">+   | - styles.css</span></code></pre>\n<p><strong>styles.css</strong></p>\n<pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n<span class="token inserted">+ import \'./styles.css\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n    const btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick event is bind to the original printMe function\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  let element = component();\n  document.body.appendChild(element);\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n      document.body.removeChild(element);\n      element = component(); // Re-render the "component" to update the click handler\n      document.body.appendChild(element);\n    })\n  }</code></pre>\n<p>将 <code>body</code> 的 style 改为 <code>background: red;</code>，你应该可以立即看到页面的背景颜色随之更改，而无需完全刷新。</p>\n<p><strong>styles.css</strong></p>\n<pre><code class="hljs language-diff">  body {\n<span class="token deleted">-   background: blue;</span>\n<span class="token inserted">+   background: red;</span>\n  }</code></pre>\n<h2 id="其他代码和框架">其他代码和框架<a href="#%E5%85%B6%E4%BB%96%E4%BB%A3%E7%A0%81%E5%92%8C%E6%A1%86%E6%9E%B6" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>社区还提供许多其他 loader 和示例，可以使 HMR 与各种框架和库平滑地进行交互……</p>\n<ul>\n<li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>: 实时调整 react 组件。</li>\n<li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>: 此 loader 支持 vue 组件的 HMR，提供开箱即用体验。</li>\n<li><a href="https://github.com/klazuka/elm-hot-webpack-loader">Elm Hot webpack Loader</a>: 支持 Elm 编程语言的 HMR。</li>\n<li><a href="https://github.com/gdi2290/angular-hmr">Angular HMR</a>: 没有必要使用 loader！直接修改 NgModule 主文件就够了，\n它可以完全控制 HMR API。</li>\n<li><a href="https://github.com/sveltejs/svelte-loader">Svelte Loader</a>: 此 loader 开箱即用地支持 Svelte 组件的热更新。</li>\n</ul>\n<blockquote class="tip">\n<p>如果你知道任何其他 loader 或 plugin，能够有助于或增强模块热替换(hot module replacement)，请提交一个 pull request 以添加到此列表中！</p>\n</blockquote>\n'}}]);