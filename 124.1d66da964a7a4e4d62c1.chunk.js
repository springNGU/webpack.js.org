(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{416:function(n,s,a){"use strict";a.r(s),s.default='<p>以下各节描述从 webpack 1 到 webpack 2 的重大变化。</p>\n<blockquote class="tip">\n<p>注意：webpack 从 1 到 2 的变化，比从 2 到 3 要少很多，所以版本迁移起来难度应该不大。如果你遇到了问题，请查看<a href="https://github.com/webpack/webpack/releases">更新日志</a> 以了解更多细节。</p>\n</blockquote>\n<h2 id="resolveroot-resolvefallback-resolvemodulesdirectories"><code>resolve.root</code>, <code>resolve.fallback</code>, <code>resolve.modulesDirectories</code><a href="#resolveroot-resolvefallback-resolvemodulesdirectories" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>这些选项被一个单独的选项 <code>resolve.modules</code> 取代。更多用法请查看 <a href="/configuration/resolve">resolving</a> 。</p>\n<pre><code class="hljs language-diff">  resolve: {\n<span class="token deleted">-   root: path.join(__dirname, "src")</span>\n<span class="token inserted">+   modules: [</span>\n<span class="token inserted">+     path.join(__dirname, "src"),</span>\n<span class="token inserted">+     "node_modules"</span>\n<span class="token inserted">+   ]</span>\n  }</code></pre>\n<h2 id="resolveextensions"><code>resolve.extensions</code><a href="#resolveextensions" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>此选项不再需要传一个空字符串。此行为被迁移到 <code>resolve.enforceExtension</code> 。更多用法请查看 <a href="/configuration/resolve">解析</a> 。</p>\n<h2 id="resolve"><code>resolve.*</code><a href="#resolve" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>这里更改了几个 API 。由于不常用，不在这里详细列出。更多用法请查看 <a href="/configuration/resolve">解析</a> 。</p>\n<h2 id="moduleloaders-升级为-modulerules"><code>module.loaders</code> 升级为 <code>module.rules</code><a href="#moduleloaders-%E5%8D%87%E7%BA%A7%E4%B8%BA-modulerules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>旧的 loader 配置被更强大的 rules 系统取代，后者允许配置 loader 以及其他更多选项。\n为了兼容旧版，<code>module.loaders</code> 语法仍然有效，旧的属性名依然可以被解析。\n新的命名约定更易于理解，并且是升级配置使用 <code>module.rules</code> 的好理由。</p>\n<pre><code class="hljs language-diff">  module: {\n<span class="token deleted">-   loaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.css$/,\n<span class="token deleted">-       loaders: [</span>\n<span class="token deleted">-         "style-loader",</span>\n<span class="token deleted">-         "css-loader?modules=true"</span>\n<span class="token inserted">+       use: [</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "style-loader"</span>\n<span class="token inserted">+         },</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "css-loader",</span>\n<span class="token inserted">+           options: {</span>\n<span class="token inserted">+             modules: true</span>\n<span class="token inserted">+           }</span>\n<span class="token inserted">+         }</span>\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: "babel-loader", // 在这里不要使用 "use" \n        options: {\n          // ...\n        }\n      }\n    ]\n  }</code></pre>\n<h2 id="链式-loaders">链式 loaders<a href="#%E9%93%BE%E5%BC%8F-loaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>就像在 webpack 1 中，loader 可以链式调用，上一个 loader 的输出被作为输入传给下一个 loader。\n使用 <a href="/configuration/module/#ruleuse">rule.use</a> 配置选项，<code>use</code> 可以设置为一个 loader 数组。\n在 webpack 1 中，loader 通常被用 <code>!</code> 连写。这一写法在 webpack 2 中只在使用旧的选项 <code>module.loaders</code> 时才有效。</p>\n<pre><code class="hljs language-diff">  module: {\n<span class="token deleted">-   loaders: [{</span>\n<span class="token inserted">+   rules: [{</span>\n      test: /\\.less$/,\n<span class="token deleted">-     loader: "style-loader!css-loader!less-loader"</span>\n<span class="token inserted">+     use: [</span>\n<span class="token inserted">+       "style-loader",</span>\n<span class="token inserted">+       "css-loader",</span>\n<span class="token inserted">+       "less-loader"</span>\n<span class="token inserted">+     ]</span>\n    }]\n  }</code></pre>\n<h2 id="已移除--loader-模块名称自动扩展">已移除 <code>-loader</code> 模块名称自动扩展<a href="#%E5%B7%B2%E7%A7%BB%E9%99%A4--loader-%E6%A8%A1%E5%9D%97%E5%90%8D%E7%A7%B0%E8%87%AA%E5%8A%A8%E6%89%A9%E5%B1%95" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在引用 loader 时，不能再省略 <code>-loader</code> 后缀了:</p>\n<pre><code class="hljs language-diff">  module: {\n    rules: [\n      {\n        use: [\n<span class="token deleted">-         "style",</span>\n<span class="token inserted">+         "style-loader",</span>\n<span class="token deleted">-         "css",</span>\n<span class="token inserted">+         "css-loader",</span>\n<span class="token deleted">-         "less",</span>\n<span class="token inserted">+         "less-loader",</span>\n        ]\n      }\n    ]\n  }</code></pre>\n<p>你仍然可以通过配置 <code>resolveLoader.moduleExtensions</code> 配置选项，启用这一旧有行为，但是我们不推荐这么做。</p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ resolveLoader: {</span>\n<span class="token inserted">+   moduleExtensions: ["-loader"]</span>\n<span class="token inserted">+ }</span></code></pre>\n<p>了解这一改变背后的原因，请查看 <a href="https://github.com/webpack/webpack/issues/2986">#2986</a> 。</p>\n<h2 id="json-loader-不再需要手动添加"><code>json-loader</code> 不再需要手动添加<a href="#json-loader-%E4%B8%8D%E5%86%8D%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>如果没有为 JSON 文件配置 loader，webpack 将自动尝试通过 <a href="https://github.com/webpack-contrib/json-loader"><code>json-loader</code></a> 加载 JSON 文件。</p>\n<pre><code class="hljs language-diff">  module: {\n    rules: [\n<span class="token deleted">-     {</span>\n<span class="token deleted">-       test: /\\.json/,</span>\n<span class="token deleted">-       loader: "json-loader"</span>\n<span class="token deleted">-     }</span>\n    ]\n  }</code></pre>\n<p><a href="https://github.com/webpack/webpack/issues/3363">我们决定这样做</a>\n是为了消除 webpack、 node.js 和 browserify 之间的环境差异。</p>\n<h2 id="配置中的-loader-默认相对于-context-进行解析">配置中的 loader 默认相对于 context 进行解析<a href="#%E9%85%8D%E7%BD%AE%E4%B8%AD%E7%9A%84-loader-%E9%BB%98%E8%AE%A4%E7%9B%B8%E5%AF%B9%E4%BA%8E-context-%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在 <strong>webpack 1</strong> 中，默认配置下 loader 解析相对于被匹配的文件。然而，在 <strong>webpack 2</strong> 中，默认配置下 loader 解析相对于 <code>context</code> 选项。</p>\n<p>这解决了「在使用 <code>npm link</code> 或引用 <code>context</code> 上下文目录之外的模块时，loader 所导致的模块重复载入」的问题。</p>\n<p>你可以移除掉那些为解决此问题的 hack 方案了：</p>\n<pre><code class="hljs language-diff">  module: {\n    rules: [\n      {\n        // ...\n<span class="token deleted">-       loader: require.resolve("my-loader")</span>\n<span class="token inserted">+       loader: "my-loader"</span>\n      }\n    ]\n  },\n  resolveLoader: {\n<span class="token deleted">-   root: path.resolve(__dirname, "node_modules")</span>\n  }</code></pre>\n<h2 id="移除了-modulepreloaders-和-modulepostloaders-：">移除了 <code>module.preLoaders</code> 和 <code>module.postLoaders</code> ：<a href="#%E7%A7%BB%E9%99%A4%E4%BA%86-modulepreloaders-%E5%92%8C-modulepostloaders-%EF%BC%9A" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-diff">  module: {\n<span class="token deleted">-   preLoaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.js$/,\n<span class="token inserted">+       enforce: "pre",</span>\n        loader: "eslint-loader"\n      }\n    ]\n  }</code></pre>\n<h2 id="uglifyjsplugin-sourcemap"><code>UglifyJsPlugin</code> sourceMap<a href="#uglifyjsplugin-sourcemap" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p> <code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code>。这意味着如果你在压缩代码时启用了 <code>source map</code>，或者想要让 <code>uglifyjs</code> 的警告能够对应到正确的代码行，你需要将 <code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 设为 <code>true</code> 。</p>\n<pre><code class="hljs language-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     sourceMap: true</span>\n    })\n  ]</code></pre>\n<h2 id="uglifyjsplugin-warnings"><code>UglifyJsPlugin</code> warnings<a href="#uglifyjsplugin-warnings" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p> <code>UglifyJsPlugin</code> 的 <code>compress.warnings</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code> 。 这意味着如果你想要看到 <code>uglifyjs</code> 的警告信息，你需要将 <code>compress.warnings</code> 设为 <code>true。</code></p>\n<pre><code class="hljs language-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     compress: {</span>\n<span class="token inserted">+       warnings: true</span>\n<span class="token inserted">+     }</span>\n    })\n  ]</code></pre>\n<h2 id="uglifyjsplugin-压缩优化-loaders"><code>UglifyJsPlugin</code> 压缩优化 loaders<a href="#uglifyjsplugin-%E5%8E%8B%E7%BC%A9%E4%BC%98%E5%8C%96-loaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>UglifyJsPlugin</code> 不再压缩 loaders。在未来很长一段时间里，需要通过设置 <code>minimize:true</code> 来压缩 loaders。参考 loader 文档里的相关选项。</p>\n<p>loaders 的压缩模式将在 webpack 3 或后续版本中取消。</p>\n<p>为了兼容旧的 loaders，loaders 可以通过插件来切换到压缩模式：</p>\n<pre><code class="hljs language-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     minimize: true</span>\n<span class="token inserted">+   })</span>\n  ]</code></pre>\n<h2 id="移除-dedupeplugin">移除 <code>DedupePlugin</code><a href="#%E7%A7%BB%E9%99%A4-dedupeplugin" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>不再需要 <code>webpack.optimize.DedupePlugin</code>。请从配置中移除。</p>\n<h2 id="bannerplugin---破坏性改动"><code>BannerPlugin</code> - 破坏性改动<a href="#bannerplugin---%E7%A0%B4%E5%9D%8F%E6%80%A7%E6%94%B9%E5%8A%A8" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>BannerPlugin</code> 不再接受两个参数，而是只接受单独的 options 对象。</p>\n<pre><code class="hljs language-diff">  plugins: [\n<span class="token deleted">-    new webpack.BannerPlugin(\'Banner\', {raw: true, entryOnly: true});</span>\n<span class="token inserted">+    new webpack.BannerPlugin({banner: \'Banner\', raw: true, entryOnly: true});</span>\n  ]</code></pre>\n<h2 id="默认加载-occurrenceorderplugin">默认加载 <code>OccurrenceOrderPlugin</code><a href="#%E9%BB%98%E8%AE%A4%E5%8A%A0%E8%BD%BD-occurrenceorderplugin" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p> <code>OccurrenceOrderPlugin</code> 现在默认启用，并已重命名(在webpack 1 中为 <code>OccurenceOrderPlugin</code>) 。\n因此，请确保从你的配置中删除该插件：</p>\n<pre><code class="hljs language-diff">  plugins: [\n    // webpack 1\n<span class="token deleted">-   new webpack.optimize.OccurenceOrderPlugin()</span>\n    // webpack 2\n<span class="token deleted">-   new webpack.optimize.OccurrenceOrderPlugin()</span>\n  ]</code></pre>\n<h2 id="extracttextwebpackplugin---破坏性改动"><code>ExtractTextWebpackPlugin</code> - 破坏性改动<a href="#extracttextwebpackplugin---%E7%A0%B4%E5%9D%8F%E6%80%A7%E6%94%B9%E5%8A%A8" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">ExtractTextPlugin</a> 需要使用版本 2，才能在 webpack 2 下正常运行 。</p>\n<p><code>npm install --save-dev extract-text-webpack-plugin</code></p>\n<p>这一插件的配置变化主要体现在语法上。</p>\n<h3 id="extracttextpluginextract"><code>ExtractTextPlugin.extract</code><a href="#extracttextpluginextract" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-diff">module: {\n  rules: [\n    {\n      test: /.css$/,\n<span class="token deleted">-      loader: ExtractTextPlugin.extract("style-loader", "css-loader", { publicPath: "/dist" })</span>\n<span class="token inserted">+      use: ExtractTextPlugin.extract({</span>\n<span class="token inserted">+        fallback: "style-loader",</span>\n<span class="token inserted">+        use: "css-loader",</span>\n<span class="token inserted">+        publicPath: "/dist"</span>\n<span class="token inserted">+      })</span>\n    }\n  ]\n}</code></pre>\n<h3 id="new-extracttextpluginoptions"><code>new ExtractTextPlugin({options})</code><a href="#new-extracttextpluginoptions" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-diff">plugins: [\n<span class="token deleted">-  new ExtractTextPlugin("bundle.css", { allChunks: true, disable: false })</span>\n<span class="token inserted">+  new ExtractTextPlugin({</span>\n<span class="token inserted">+    filename: "bundle.css",</span>\n<span class="token inserted">+    disable: false,</span>\n<span class="token inserted">+    allChunks: true</span>\n<span class="token inserted">+  })</span>\n]</code></pre>\n<h2 id="全动态-require-现在默认会失败">全动态 require 现在默认会失败<a href="#%E5%85%A8%E5%8A%A8%E6%80%81-require-%E7%8E%B0%E5%9C%A8%E9%BB%98%E8%AE%A4%E4%BC%9A%E5%A4%B1%E8%B4%A5" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>只有一个表达式的依赖（例如 <code>require(expr)</code>）将创建一个空的 context 而不是一个完整目录的 context。</p>\n<p>这样的代码应该进行重构，因为它不能与 ES2015 模块一起使用。如果你确定不会有 ES2015 模块，你可以使用 <code>ContextReplacementPlugin</code> 来指示 compiler 进行正确的解析。</p>\n<blockquote class="todo">\n<p>Link to an article about dynamic dependencies.</p>\n</blockquote>\n<h3 id="在-cli-和配置中使用自定义参数">在 CLI 和配置中使用自定义参数<a href="#%E5%9C%A8-cli-%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>如果你之前滥用 CLI 来传自定义参数到配置中，比如：</p>\n<p><code>webpack --custom-stuff</code></p>\n<pre><code class="hljs language-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">var</span> customStuff <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'--custom-stuff\'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">/* ... */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></code></pre>\n<p>你将会发现新版中不再允许这么做。CLI 现在更加严格了。</p>\n<p>替代地，现在提供了一个接口来传递参数给配置。我们应该采用这种新方式，在未来许多工具将可能依赖于此。</p>\n<p><code>webpack --env.customStuff</code></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> customStuff <span class="token operator">=</span> env<span class="token punctuation">.</span>customStuff<span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>详见 <a href="/api/cli">CLI</a> 。</p>\n<h2 id="requireensure-以及-amd-require-将采用异步式调用"><code>require.ensure</code> 以及 AMD <code>require</code> 将采用异步式调用<a href="#requireensure-%E4%BB%A5%E5%8F%8A-amd-require-%E5%B0%86%E9%87%87%E7%94%A8%E5%BC%82%E6%AD%A5%E5%BC%8F%E8%B0%83%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>现在这些函数总是异步的，而不是当 chunk 已经加载完成的时候同步调用它们的回调函数 (callback) 。</p>\n<p><strong><code>require.ensure</code> 现在依赖原生的 <code>Promise</code>s 。如果不支持 Promise 的环境中使用 <code>require.ensure</code> ，你需要添加 polyfill.</strong> 。</p>\n<h2 id="通过-options-中配置-loader">通过 <code>options</code> 中配置 loader<a href="#%E9%80%9A%E8%BF%87-options-%E4%B8%AD%E9%85%8D%E7%BD%AE-loader" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>你<em>不能再</em>通过 <code>webpack.config.js</code> 的自定义属性来配置 loader 。只能通过 <code>options</code> 来配置。下面配置的 <code>ts</code> 属性在 webpack 2 下不再有效：</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 在 webpack 2 中无效</span>\n  ts<span class="token punctuation">:</span> <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="什么是-options-？">什么是 <code>options</code> ？<a href="#%E4%BB%80%E4%B9%88%E6%98%AF-options-%EF%BC%9F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>好问题。严格来说，有两种办法，都可以用来配置 webpack 的 loader 。典型的 <code>options</code> 被称为 <code>query</code>，是一个可以被添加到 loader 名之后的字符串。它比较像一个查询字符串(query string)，但是实际上有<a href="https://github.com/webpack/loader-utils#parsequery">更强大的能力</a>:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader?\'</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>不过它也可以分开来，写成一个单独的对象，紧跟在 loader 属性后面：</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span>  <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="loaderoptionsplugin-context"><code>LoaderOptionsPlugin</code> context<a href="#loaderoptionsplugin-context" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>有的 loader 需要从配置中读取一些 context 信息。在未来很长一段时间里，这将需要通过 loader options 传入。详见 loader 文档的相关选项。</p>\n<p>为了保持对旧 loaders 的兼容，这些信息可以通过插件传进来：</p>\n<pre><code class="hljs language-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     options: {</span>\n<span class="token inserted">+       context: __dirname</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   })</span>\n  ]</code></pre>\n<h2 id="debug"><code>debug</code><a href="#debug" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在 webpack 1 中 <code>debug</code> 选项可以将 loader 切换到调试模式 (debug mode) 。在未来很长一段时间里，这将需要通过 loader 选项传递。详见 loader 文档的相关选项。</p>\n<p>loaders 的调试模式将在 webpack 3 或后续版本中取消。</p>\n<p>为了保持对旧 loaders 的兼容，loader 可以通过插件来切换到调试模式：</p>\n<pre><code class="hljs language-diff"><span class="token deleted">- debug: true,</span>\n  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     debug: true</span>\n<span class="token inserted">+   })</span>\n  ]</code></pre>\n<h2 id="es2015-的代码分割">ES2015 的代码分割<a href="#es2015-%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在 webpack 1 中，可以使用 <a href="/api/module-methods/#requireensure"><code>require.ensure()</code></a> 作为实现应用程序的懒加载 chunks 的一种方法：</p>\n<pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>ES2015 模块加载规范定义了 <a href="/api/module-methods/#import-1"><code>import()</code></a> 方法，可以在运行时 (runtime) 动态地加载 ES2015 模块。webpack 将 <code>import()</code> 作为分割点 (split-point) 并将所要请求的模块 (requested module) 放置到一个单独的 chunk 中。<code>import()</code> 接收模块名作为参数，并返回一个 Promise 。</p>\n<pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./module\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Chunk loading failed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>好消息是：如果加载 chunk 失败，我们现在可以进行处理，因为现在它基于 <code>Promise</code>。</p>\n<h2 id="动态表达式">动态表达式<a href="#%E5%8A%A8%E6%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>可以传递部分表达式给 <code>import()</code> 。这与 CommonJS 对表达式的处理方式一致（webpack 为所有可能匹配的文件创建 context](/plugins/context-replacement-plugin/)) ）。</p>\n<p><code>import()</code> 为每一个可能的模块创建独立的 chunk。</p>\n<pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./routes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/route`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>route <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">route<span class="token punctuation">.</span>Route</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 上面代码为每个可能的路由创建独立的 chunk</span></code></pre>\n<h2 id="混合使用-es2015、amd-和-commonjs">混合使用 ES2015、AMD 和 CommonJS<a href="#%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8-es2015%E3%80%81amd-%E5%92%8C-commonjs" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>你可以自由混合使用三种模块类型（甚至在同一个文件中）。在这个情况中 webpack 的行为和 babel 以及 node-eps 一致：</p>\n<pre><code class="hljs language-javascript"><span class="token comment">// CommonJS 调用 ES2015 模块</span>\n<span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./book\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbook<span class="token punctuation">.</span>currentPage<span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token function">readPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">===</span> <span class="token string">\'This is a book\'</span><span class="token punctuation">;</span></code></pre>\n<pre><code class="hljs language-javascript"><span class="token comment">// ES2015 模块调用 CommonJS</span>\n<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span> <span class="token comment">// module.exports 映射到 default</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span> <span class="token comment">// 从返回对象(returned object+)中读取命名的导出方法(named exports)</span>\n\n<span class="token keyword">typeof</span> fs<span class="token punctuation">.</span>readFileSync <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> readFileSync <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">;</span></code></pre>\n<p>值得注意的是，你需要让 Babel 不解析这些模块符号，从而让 webpack 可以使用它们。你可以通过设置如下配置到 .babelrc 或 babel-loader 来实现这一点。</p>\n<p><strong>.babelrc</strong></p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="hints">Hints<a href="#hints" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>不需要改变什么，但有机会改变。</p>\n<h3 id="模版字符串">模版字符串<a href="#%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>webpack 现在支持表达式中的模板字符串了。这意味着你可以在 webpack 构建中使用它们：</p>\n<pre><code class="hljs language-diff"><span class="token deleted">- require("./templates/" + name);</span>\n<span class="token inserted">+ require(`./templates/${name}`);</span></code></pre>\n<h3 id="配置中使用-promise">配置中使用 Promise<a href="#%E9%85%8D%E7%BD%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-promise" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>webpack 现在支持在配置文件中返回 <code>Promise</code> 了。这让你能在配置文件中做异步处理。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetchLangs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>lang <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">LANGUAGE</span><span class="token punctuation">:</span> lang <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="高级-loader-匹配">高级 loader 匹配<a href="#%E9%AB%98%E7%BA%A7-loader-%E5%8C%B9%E9%85%8D" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>webpack 现在支持对 loader 进行更多方式的匹配。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        resource<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "/path/filename.js"</span>\n        resourceQuery<span class="token punctuation">:</span> <span class="token regex">/^\\?querystring$/</span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "?querystring"</span>\n        issuer<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// 如果请求 "/path/filename.js" 则匹配 "/path/something.js"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="更多的-cli-参数项">更多的 CLI 参数项<a href="#%E6%9B%B4%E5%A4%9A%E7%9A%84-cli-%E5%8F%82%E6%95%B0%E9%A1%B9" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>你可以使用一些新的 CLI 参数项：</p>\n<p><code>--define process.env.NODE_ENV="production"</code> 见 <a href="/plugins/define-plugin/"><code>DefinePlugin</code></a> 。</p>\n<p><code>--display-depth</code> 显示每个模块到入口的距离。</p>\n<p><code>--display-used-exports</code> 显示一个模块中被使用的 exports 信息。</p>\n<p><code>--display-max-modules</code> 设置输出时显示的模块数量（默认是 15）。</p>\n<p><code>-p</code> 能够定义<code>process.env.NODE_ENV</code> 为 <code>"production"</code> 。</p>\n<h2 id="loader-变更">Loader 变更<a href="#loader-%E5%8F%98%E6%9B%B4" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>以下变更仅影响 loader 的开发者。</p>\n<h3 id="cacheable">Cacheable<a href="#cacheable" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Loaders 现在默认可被缓存。Loaders 如果不想被缓存，需要选择不被缓存。</p>\n<pre><code class="hljs language-diff">  // 缓存 loader\n  module.exports = function(source) {\n<span class="token deleted">-   this.cacheable();</span>\n    return source;\n  }</code></pre>\n<pre><code class="hljs language-diff">  // 不缓存 loader\n  module.exports = function(source) {\n<span class="token inserted">+   this.cacheable(false);</span>\n    return source;\n  }</code></pre>\n<h3 id="复杂-options">复杂 options<a href="#%E5%A4%8D%E6%9D%82-options" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>webpack 1</strong> 只支持能够「可 <code>JSON.stringify</code> 的对象」作为 loader 的 options。</p>\n<p><strong>webpack 2</strong> 现在支持任意 JS 对象作为 loader 的 options。</p>\n<p>webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.2.1">2.2.1</a> 之前（即从 2.0.0 到 2.2.0），使用复合 <code>options</code> ，需要在 <code>options</code> 对象上添加 <code>ident</code>，允许它能够被其他 loader 引用。这 <strong>在 2.2.1 中被删除</strong> ，因此目前的迁移不再需要使用 <code>ident</code> 键。</p>\n<pre><code class="hljs language-diff">{\n  test: /\\.ext/\n  use: {\n    loader: \'...\',\n    options: {\n<span class="token deleted">-     ident: \'id\',</span>\n      fn: () => require(\'./foo.js\')\n    }\n  }\n}</code></pre>\n'}}]);