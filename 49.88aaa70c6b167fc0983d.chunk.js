(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{341:function(n,a,s){"use strict";s.r(a),a.default='<p>这里是 webpack 支持的其它选项。</p>\n<blockquote class="warning">\n<p>寻求帮助：这个页面还在更新中，如果你发现本页面内有描述不准确或者不完整，请在 <a href="https://github.com/webpack/webpack.js.org">webpack 的文档仓库</a>中创建 issue 或者 pull request</p>\n</blockquote>\n<h2 id="amd"><code>amd</code><a href="#amd" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code> <code>boolean: false</code></p>\n<p>设置 <code>require.amd</code> 或 <code>define.amd</code> 的值。设置 <code>amd</code> 为 <code>false</code> 会禁用 webpack 的 AMD 支持。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  amd<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    jQuery<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>某些流行的模块是按照 AMD 规范编写的，最引人瞩目的 jQuery 版本在 1.7.0 到 1.9.1，如果 loader 提示它对页面包含的多个版本采取了<a href="https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD">特殊许可</a>时，才会注册为 AMD 模块。</p>\n<p>许可权限是具有「限制指定版本注册」或「支持有不同定义模块的不同沙盒」的能力。</p>\n<p>此选项允许将模块查找的键(key)设置为真值(truthy value)。\n发生这种情况时，webpack 中的 AMD 支持将忽略定义的名称。</p>\n<h2 id="bail"><code>bail</code><a href="#bail" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code></p>\n<p>在第一个错误出现时抛出失败结果，而不是容忍它。默认情况下，当使用 HMR 时，webpack 会将在终端以及浏览器控制台中，以红色文字记录这些错误，但仍然继续进行打包。要启用它：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  bail<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>这将迫使 webpack 退出其打包过程。</p>\n<h2 id="cache"><code>cache</code><a href="#cache" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>缓存生成的 webpack 模块和 chunk，来改善构建速度。<code>cache</code> 会在<a href="/configuration/mode/#mode-development"><code>开发</code> 模式</a>被设置成 <code>type: \'memory\'</code> 而且在 <a href="/configuration/mode/#mode-production"><code>生产</code> 模式</a> 中被禁用。 <code>cache: true</code> 与 <code>cache: { type: \'memory\' }</code> 配置作用一致。 传入  <code>false</code> 会禁用缓存:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cachetype"><code>cache.type</code><a href="#cachetype" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string: \'memory\' | \'filesystem\'</code></p>\n<p>将 <code>cache</code> 类型设置成内存或者文件系统。 <code>memory</code> 选项是非常直白的，它告诉 webpack 将内存存放在内存中并且不允许额外的配置：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'memory\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>当将 <code>cache.type</code> 设置成 <code>filesystem</code> 会开放更多的选荐可配置。</p>\n<h3 id="cachecachedirectory"><code>cache.cacheDirectory</code><a href="#cachecachedirectory" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>缓存的。默认为 <code>node_modules/.cache/webpack</code>。</p>\n<p><code>cache.cacheDirectory</code> 选项仅当 <a href="#cachetype"><code>cache.type</code></a> 被设置成 <code>filesystem</code> 才可用。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    cacheDirectory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'.temp_cache\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>最终的缓存目标是 <code>cache.cacheDirectory</code> + <code>cache.name</code> 的混合.</p>\n</blockquote>\n<h3 id="cachecachelocation"><code>cache.cacheLocation</code><a href="#cachecachelocation" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>缓存的路径。默认值为 <code>path.resolve(cache.cacheDirectory, cache.name)</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    cacheLocation<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'.test_cache\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cachebuilddependencies"><code>cache.buildDependencies</code><a href="#cachebuilddependencies" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>object</code></p>\n<p><code>cache.buildDependencies</code> is an object of arrays of additional code dependencies for the build. webpack will use a hash of each of these items and all dependencies to invalidate the filesystem cache.</p>\n<p>Defaults to <code>webpack/lib</code> to get all dependencies of webpack.</p>\n<blockquote class="tip">\n<p>It\'s recommended to set <code>cache.buildDependencies.config: [__filename]</code> in your webpack configuration to get the latest configuration and all dependencies.</p>\n</blockquote>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    buildDependencies<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// This makes all dependencies of this file - build dependencies</span>\n      config<span class="token punctuation">:</span> <span class="token punctuation">[</span>__filename<span class="token punctuation">]</span>\n      <span class="token comment">// By default webpack and loaders are build dependencies</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cachemanagedpaths"><code>cache.managedPaths</code><a href="#cachemanagedpaths" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>[string] = [\'./node_modules\']</code></p>\n<p><code>cache.managedPaths</code> is an array of package-manager only managed paths. webpack will avoid hashing and timestamping them, assume the version is unique and will use it as a snapshot (for both memory and filesystem cache).</p>\n<h3 id="cachehashalgorithm"><code>cache.hashAlgorithm</code><a href="#cachehashalgorithm" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>用于哈希生成的算法。详情请参阅 <a href="https://nodejs.org/api/crypto.html">Node.js crypto</a>。默认值为 <code>md4</code>.</p>\n<p><code>cache.hashAlgorithm</code> 选项仅当 <a href="#cachetype"><code>cache.type</code></a> 设置成 <code>filesystem</code> 才可配置。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    hashAlgorithm<span class="token punctuation">:</span> <span class="token string">\'md4\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cachename"><code>cache.name</code><a href="#cachename" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>缓存的名称。不同的名字会导致不同的的共存的缓存。默认值为 <code>${config.name}-${config.mode}</code>。使用 <code>cache.name</code> 当你有多份配置的时候，是比较合理的因为会有配置会有独立的缓存。</p>\n<p><code>cache.name</code> 选项仅当 <a href="#cachetype"><code>cache.type</code></a> 被设置成 <code>filesystem</code> 的时候可进行配置。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'AppBuildCache\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cachestore"><code>cache.store</code><a href="#cachestore" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string = \'pack\': \'pack\'</code></p>\n<p><code>cache.store</code> 告诉 webpack 什么时候将数据存放在文件系统中。</p>\n<ul>\n<li><code>\'pack\'</code>: 当编译器闲置时候，将缓存数据都存放在一个文件中</li>\n</ul>\n<p><code>cache.store</code> 选项仅当 <a href="#cachetype"><code>cache.type</code></a> 设置成 <code>filesystem</code> 才可配置。</p>\n<blockquote class="warning">\n<p><code>pack</code> 是 webpack 5.0.x 起唯一支持的类型</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    store<span class="token punctuation">:</span> <span class="token string">\'pack\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cacheversion"><code>cache.version</code><a href="#cacheversion" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string = \'\'</code></p>\n<p>缓存数据的版本。不同版本不会允许重用缓存和重载当前的内容。当配置以一种无法重用缓存的方式改变时，要更新缓存的版本。这会让缓存失效。</p>\n<p><code>cache.version</code> 选项仅当 <a href="#cachetype"><code>cache.type</code></a> 设置成 <code>filesystem</code> 才可配置。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n    version<span class="token punctuation">:</span> <span class="token string">\'your_version\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>在具有不同选项的调用之间不要共享缓存。</p>\n</blockquote>\n<h3 id="cacheidletimeout"><code>cache.idleTimeout</code><a href="#cacheidletimeout" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number = 10000</code></p>\n<p>单位毫秒。 <code>cache.idleTimeout</code> 表示缓存存储发生后的时间段。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//..</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    idleTimeout<span class="token punctuation">:</span> <span class="token number">10000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p><code>cache.idleTimeout</code> 仅当 <a href="#cachestore"><code>cache.store</code></a> 设置成 <code>\'pack\'</code> 或 <code>\'idle\'</code> 才可配置。</p>\n</blockquote>\n<h3 id="cacheidletimeoutforinitialstore"><code>cache.idleTimeoutForInitialStore</code><a href="#cacheidletimeoutforinitialstore" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number = 0</code></p>\n<p>单位毫秒。 <code>cache.idleTimeoutForInitialStore</code> 是在初始缓存存储发生后的时间段。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//..</span>\n  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    idleTimoutForInitialStore<span class="token punctuation">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p><code>cache.idleTimeoutForInitialStore</code> 仅当 <a href="#cachestore"><code>cache.store</code></a> 设置成 <code>\'pack\'</code> 或 <code>\'idle\'</code> 才可配置。</p>\n</blockquote>\n<h2 id="loader"><code>loader</code><a href="#loader" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>在 loader 上下文中暴露自定义值。</p>\n<blockquote class="todo">\n<p>添加一个例子...</p>\n</blockquote>\n<h2 id="parallelism"><code>parallelism</code><a href="#parallelism" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>number = 100</code></p>\n<p>限制并行处理的模块数量。可以用于调优性能或获取更可靠的性能分析结果。</p>\n<h2 id="profile"><code>profile</code><a href="#profile" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>捕获一个应用程序"配置文件"，包括统计和提示，然后可以使用 <a href="https://webpack.github.io/analyse/">Analyze</a> 分析工具进行详细分析。</p>\n<blockquote class="tip">\n<p>使用 <a href="https://www.npmjs.com/package/stats-webpack-plugin">StatsPlugin</a> 可以更好地控制生成的配置文件。</p>\n</blockquote>\n<blockquote class="tip">\n<p>与 <code>parallelism: 1</code> 混用以达到更好的结果。</p>\n</blockquote>\n<h2 id="recordspath"><code>recordsPath</code><a href="#recordspath" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>开启这个选项可以生成一个 JSON 文件，其中含有 webpack 的 "records" 记录 - 即「用于存储跨多次构建(across multiple builds)的模块标识符」的数据片段。可以使用此文件来跟踪在每次构建之间的模块变化。只要简单的设置一下路径,就可以生成这个 JSON 文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  recordsPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>如果你使用了<a href="/guides/code-splitting">代码分离(code splittnig)</a>这样的复杂配置，records 会特别有用。这些数据用于确保拆分 bundle，以便实现你需要的<a href="/guides/caching">缓存(caching)</a>行为。</p>\n<blockquote class="tip">\n<p>注意，虽然这个文件是由编译器(compiler)生成的，但你可能仍然希望在源代码管理中追踪它，以便随时记录它的变化情况。</p>\n</blockquote>\n<blockquote class="warning">\n<p>设置 <code>recordsPath</code> 本质上会把 <code>recordsInputPath</code> 和 <code>recordsOutputPath</code> 都设置成相同的路径。通常来讲这也是符合逻辑的，除非你决定改变记录文件的名称。可以查看下面的实例：</p>\n</blockquote>\n<h2 id="recordsinputpath"><code>recordsInputPath</code><a href="#recordsinputpath" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>指定读取最后一条记录的文件的名称。这可以用来重命名一个记录文件，可以查看下面的实例：</p>\n<h2 id="recordsoutputpath"><code>recordsOutputPath</code><a href="#recordsoutputpath" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>指定记录要写入的位置。以下示例描述了如何用这个选项和 <code>recordsInptuPaht</code> 来重命名一个记录文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  recordsInputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  recordsOutputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'newRecords.json\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="name"><code>name</code><a href="#name" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>配置的名称。当加载不同的配置时会被使用。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'admin-app\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="infrastructurelogging">infrastructureLogging<a href="#infrastructurelogging" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>用于基础设施水平的日志选项。</p>\n<p><code>object = {}</code></p>\n<h4 id="infrastructurelogginglevel">infrastructureLogging.level<a href="#infrastructurelogginglevel" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><code>string</code></p>\n<p>开启基础设施日志输出。与 <a href="/configuration/stats/#statslogging"><code>stats.logging</code></a> 选项类似但仅仅是对于基础设施而言。 没有默认值提供。</p>\n<p>可能的取值：</p>\n<ul>\n<li><code>\'none\'</code> - 禁用日志</li>\n<li><code>\'error\'</code> - 仅仅显示错误</li>\n<li><code>\'warn\'</code> - 仅仅显示错误与告警</li>\n<li><code>\'info\'</code> - 显示错误、告警与信息</li>\n<li><code>\'log\'</code> - 显示错误、告警，信息，日志信息，组别，清楚。 收缩的组别会在收缩的状态中被显示。</li>\n<li><code>\'verbose\'</code> - 输出所有日志除了调试与追踪。收缩的组别会在扩展的状态中被显示。</li>\n</ul>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  infrastructureLogging<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    level<span class="token punctuation">:</span> <span class="token string">\'info\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="infrastructureloggingdebug">infrastructureLogging.debug<a href="#infrastructureloggingdebug" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><code>string</code> <code>RegExp</code> <code>function(name) => boolean</code> <code>[string, RegExp, function(name) => boolean]</code></p>\n<p>开启特定日志比如插件(plugins)和加载器(loaders)的调试信息。 与 <a href="/configuration/stats/#statsloggingdebug"><code>stats.loggingDebug</code></a> 选项类似但仅仅对于基础设施而言。没有默认配置提供。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  infrastructureLogging<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    level<span class="token punctuation">:</span> <span class="token string">\'info\'</span><span class="token punctuation">,</span>\n    debug<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span>\n      <span class="token regex">/MyPlugin/</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=></span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}}]);