(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{347:function(n,s,a){"use strict";a.r(s),s.default='<p>webpack 能够为多种环境或 <em>target</em> 构建编译。想要理解什么是 <code>target</code> 的详细信息，\n请阅读 <a href="/concepts/targets/">target 概念页面</a>。</p>\n<h2 id="target"><code>target</code><a href="#target" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code> <code>function (compiler)</code></p>\n<p>告知 webpack 为目标(target)指定一个环境。</p>\n<h3 id="string"><code>string</code><a href="#string" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>通过 <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a> ，\n可以支持以下字符串值：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>async-node</code><p class="description mobile">编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）</p></p></div></td>\n<td class="description desktop">编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）</td>\n</tr>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>electron-main</code><p class="description mobile">编译为 <a href="https://electronjs.org/">Electron</a> 主进程。</p></p></div></td>\n<td class="description desktop">编译为 \n<a href="https://electronjs.org/">Electron</a>\n 主进程。</td>\n</tr>\n<tr>\n<td><div class="title"><p>选项</p><p>描述</p></div>\n<div class="content"><p><code>electron-renderer</code><p class="description mobile">编译为 <a href="https://electronjs.org/">Electron</a> 渲染进程，使用 <code>JsonpTemplatePlugin</code>,</p></p></div></td>\n<td class="description desktop">编译为 \n<a href="https://electronjs.org/">Electron</a>\n 渲染进程，使用 \n<code>JsonpTemplatePlugin</code>\n,</td>\n</tr>\n</tbody>\n</table>\n<p><code>FunctionModulePlugin</code> 来为浏览器环境提供目标，使用 <code>NodeTargetPlugin</code> 和 <code>ExternalsPlugin</code>\n为 CommonJS 和 Electron 内置模块提供目标。\n<code>electron-preload</code>    | 编译为 <a href="https://electronjs.org/">Electron</a> 渲染进程，\n使用 <code>NodeTemplatePlugin</code> 且 <code>asyncChunkLoading</code> 设置为 <code>true</code> ，<code>FunctionModulePlugin</code> 来为浏览器提供目标，使用 <code>NodeTargetPlugin</code> 和 <code>ExternalsPlugin</code> 为 CommonJS 和 Electron 内置模块提供目标。\n<code>node</code>                | 编译为类 Node.js 环境可用（使用 Node.js <code>require</code> 加载 chunks）\n<code>node-webkit</code>         | 编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a>\n导入（实验性质）\n<code>web</code>                 | 编译为类浏览器环境里可用 <strong>（默认）</strong>\n<code>webworker</code>           | 编译成一个 WebWorker</p>\n<p>例如，当 <code>target</code> 设置为 <code>"electron-main"</code>，webpack 引入多个 electron 特定的变量。\n有关使用哪些模板和 externals 的更多信息，\n你可以 <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L148-L183">直接参考 webpack 源码</a>。</p>\n<h3 id="function"><code>function</code><a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>如果传入一个函数，此函数调用时会传入一个 编译器（compiler） 作为参数。如果以上列表中没有一个预定义的目标(target)符合你的要求，\n请将其设置为一个函数。</p>\n<p>例如，如果你不需要使用以上任何插件：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> undefined\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>或者可以使用你想要指定的插件</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">\'web\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}}]);