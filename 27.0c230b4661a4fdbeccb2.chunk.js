(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{316:function(n,s,a){"use strict";a.r(s),s.default='<p>正如我们在 <a href="/guides/getting-started/#using-a-configuration">起步</a> 中提到的，在 webpack 配置中有多种方式定义 <code>entry</code> 属性。除了解释为什么它可能非常有用，我们还将向你展示<strong>如何去</strong>配置 <code>entry</code> 属性。</p>\n<h2 id="单个入口（简写）语法">单个入口（简写）语法<a href="#%E5%8D%95%E4%B8%AA%E5%85%A5%E5%8F%A3%EF%BC%88%E7%AE%80%E5%86%99%EF%BC%89%E8%AF%AD%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>用法：<code>entry: string | [string]</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><code>entry</code> 属性的单个入口语法，参考下面的简写：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p><strong>当你向 <code>entry</code> 传入一个数组时会发生什么？</strong>向 <code>entry</code> 属性传入文件路径数组，将创建出一个 <strong>多主入口(multi-main entry)</strong>。在你想要一次注入多个依赖文件，并且将它们的依赖导向(graph)到一个 chunk 时，这种方式就很有用。</p>\n</blockquote>\n<p>当你正在寻找为「只有一个入口起点的应用程序或工具（即 library）」快速设置 webpack 配置的时候，这会是个很不错的选择。然而，使用此语法在扩展配置时有失灵活性。</p>\n<h2 id="对象语法">对象语法<a href="#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>用法：<code>entry: { &#x3C;entryChunkName> string | [string] }</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    adminApp<span class="token punctuation">:</span> <span class="token string">\'./src/adminApp.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p>\n<blockquote class="tip">\n<p><strong>“webpack 配置的可扩展”</strong>是指，这些配置可以重复使用，并且可以与其他配置组合使用。这是一种流行的技术，用于将关注点从环境(environment)、构建目标(build target)、运行时(runtime)中分离。然后使用专门的工具（如 <a href="https://github.com/survivejs/webpack-merge">webpack-merge</a>）将它们合并起来。</p>\n</blockquote>\n<h2 id="常见场景">常见场景<a href="#%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>以下列出一些入口配置和它们的实际用例：</p>\n<h3 id="分离-app应用程序-和-vendor第三方库-入口">分离 app(应用程序) 和 vendor(第三方库) 入口<a href="#%E5%88%86%E7%A6%BB-app%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E5%92%8C-vendor%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-%E5%85%A5%E5%8F%A3" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    vendor<span class="token punctuation">:</span> <span class="token string">\'./src/vendor.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].[contentHash].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>这是什么？</strong>这是告诉 webpack 我们想要配置 2 个单独的入口点（例如上面的示例）。</p>\n<p><strong>为什么？</strong>这样你就可以在 <code>vendor.js</code> 中存入未做修改的必要 library 或文件（例如 Bootstrap, jQuery, 图片等），然后将它们打包在一起成为单独的 chunk。内容哈希保持不变，这使浏览器可以独立地缓存它们，从而减少了加载时间。</p>\n<blockquote class="tip">\n<p>在 webpack &#x3C; 4 的版本中，通常将 vendor 作为一个单独的入口起点添加到 entry 选项中，以将其编译为一个单独的文件（与 <code>CommonsChunkPlugin</code> 结合使用）。<br><br>而在 webpack 4 中不鼓励这样做。而是使用 <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> 选项，将 vendor 和 app(应用程序) 模块分开，并为其创建一个单独的文件。<strong>不要</strong> 为 vendor 或其他不是执行起点创建 entry。</p>\n</blockquote>\n<h3 id="多页面应用程序">多页面应用程序<a href="#%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pageOne<span class="token punctuation">:</span> <span class="token string">\'./src/pageOne/index.js\'</span><span class="token punctuation">,</span>\n    pageTwo<span class="token punctuation">:</span> <span class="token string">\'./src/pageTwo/index.js\'</span><span class="token punctuation">,</span>\n    pageThree<span class="token punctuation">:</span> <span class="token string">\'./src/pageThree/index.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>这是什么？</strong>我们告诉 webpack 需要三个独立分离的依赖图（如上面的示例）。</p>\n<p><strong>为什么？</strong>在多页面应用程序中，server 会拉取一个新的 HTML 文档给你的客户端。页面重新加载此新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事，例如使用 <a href="/configuration/optimization/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> 为页面间共享的应用程序代码创建 bundle。由于入口起点数量的增多，多页应用能够复用多个入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</p>\n<blockquote class="tip">\n<p>根据经验：每个 HTML 文档只使用一个入口起点。</p>\n</blockquote>\n'}}]);