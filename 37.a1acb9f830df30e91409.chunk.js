(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{327:function(n,s,a){"use strict";a.r(s),s.default='<blockquote>\n<p>此章节描述 webpack 内部实现，对于插件开发人员可能会提供帮助</p>\n</blockquote>\n<p>打包，是指处理某些文件并将其输出为其他文件的能力。</p>\n<p>但是，在输入和输出之间，还包括有 <a href="/concepts/modules/">模块</a>, <a href="/concepts/entry-points/">入口起点</a>, chunk, chunk 组和许多其他中间部分。</p>\n<h2 id="主要部分">主要部分<a href="#%E4%B8%BB%E8%A6%81%E9%83%A8%E5%88%86" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>项目中使用的每个文件都是一个 <a href="/concepts/modules/">模块</a></p>\n<p><strong>./index.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>./app.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">\'the app\'</span><span class="token punctuation">;</span></code></pre>\n<p>通过互相引用，这些模块会形成一个图(<code>ModuleGraph</code>)数据结构。</p>\n<p>在打包过程中，模块会被合并成 chunk。\nchunk 合并成 chunk 组，并形成一个通过模块互相连接的图(<code>ModuleGraph</code>)。\n那么如何通过以上来描述一个入口起点：在其内部，会创建一个只有一个 chunk 的 chunk 组。</p>\n<p><strong>./webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index.js\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>这会创建出一个名为 <code>main</code> 的 chunk 组（<code>main</code> 是入口起点的默认名称）。\n此 chunk 组包含 <code>./index.js</code> 模块。随着 parser 处理 <code>./index.js</code> 内部的 import 时， 新模块就会被添加到此 chunk 中。</p>\n<p>另外的一个示例：</p>\n<p><strong>./webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    home<span class="token punctuation">:</span> <span class="token string">\'./home.js\'</span><span class="token punctuation">,</span>\n    about<span class="token punctuation">:</span> <span class="token string">\'./about.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>这会创建出两个名为 <code>home</code> 和 <code>about</code> 的 chunk 组。\n每个 chunk 组都有一个包含一个模块的 chunk：<code>./home.js</code> 对应 <code>home</code>，<code>./about.js</code> 对应 <code>about</code></p>\n<blockquote>\n<p>一个 chunk 组中可能有多个 chunk。例如，<a href="/plugins/split-chunks-plugin/">SplitChunksPlugin</a> 会将一个 chunk 拆分为一个或多个 chunk。</p>\n</blockquote>\n<h2 id="chunk">chunk<a href="#chunk" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>chunk 有两种形式：</p>\n<ul>\n<li><code>initial(初始化)</code> 是入口起点的 main chunk。此 chunk 包含为入口起点指定的所有模块及其依赖项。</li>\n<li><code>non-initial</code> 是可以延迟加载的块。可能会出现在使用 <a href="/guides/code-splitting/#dynamic-imports">动态导入(dynamic imports)</a> 或者 <a href="/plugins/split-chunks-plugin/">SplitChunksPlugin</a> 时。</li>\n</ul>\n<p>每个 chunk 都有对应的 <strong>asset(资源)</strong>。资源，是指输出文件（即打包结果）。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.jsx\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>./src/index.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./app.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>App <span class="token operator">=></span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&#x3C;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>这会创建出一个名为 <code>main</code> 的 initial chunk。其中包含：</p>\n<ul>\n<li><code>./src/index.jsx</code></li>\n<li><code>react</code></li>\n<li><code>react-dom</code></li>\n</ul>\n<p>以及除 <code>./app.jsx</code> 外的所有依赖</p>\n<p>然后会为 <code>./app.jsx</code> 创建 non-initial chunk，这是因为 <code>./app.jsx</code> 是动态导入的。</p>\n<p><strong>Output:</strong></p>\n<ul>\n<li><code>/dist/main.js</code> - 一个 <code>initial</code> chunk</li>\n<li><code>/dist/394.js</code> - <code>non-initial</code> chunk</li>\n</ul>\n<p>默认情况下，这些 <code>non-initial</code> chunk 没有名称，因此会使用唯一 ID 来替代名称。\n在使用动态导入时，我们可以通过使用 <a href="/api/module-methods/#magic-comments">magic comment(魔术注释)</a> 来显式指定 chunk 名称：</p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span><span class="token punctuation">(</span>\n  <span class="token comment">/* webpackChunkName: "app" */</span>\n  <span class="token string">\'./app.jsx\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>App <span class="token operator">=></span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&#x3C;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><strong>Output:</strong></p>\n<ul>\n<li><code>/dist/main.js</code> - 一个 <code>initial</code> chunk</li>\n<li><code>/dist/app.js</code> - <code>non-initial</code> chunk</li>\n</ul>\n<h2 id="output输出">output(输出)<a href="#output%E8%BE%93%E5%87%BA" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>输出文件的名称会受配置中的两个字段的影响：</p>\n<ul>\n<li><a href="/configuration/output/#outputfilename"><code>output.filename</code></a> - 用于 <code>initial</code> chunk 文件</li>\n<li><a href="/configuration/output/#outputchunkfilename"><code>output.chunkFilename</code></a> - 用于 <code>non-initial</code> chunk 文件</li>\n</ul>\n<p>这些字段中会有一些 <a href="/configuration/output/#template-strings">占位符</a>。常用的占位符如下：</p>\n<ul>\n<li><code>[id]</code> - chunk id（例如 <code>[id].js</code> -> <code>485.js</code>）</li>\n<li><code>[name]</code> - chunk name（例如 <code>[name].js</code> -> <code>app.js</code>）。如果 chunk 没有名称，则会使用其 id 作为名称</li>\n<li><code>[contenthash]</code> - 输出文件内容的 md4-hash（例如 <code>[contenthash].js</code> -> <code>4ea6ff1de66c537eb9b2.js</code>）</li>\n</ul>\n'}}]);