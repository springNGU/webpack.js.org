(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{301:function(n,s,a){"use strict";a.r(s),s.default='<p>如果已经通过 <a href="/plugins/hot-module-replacement-plugin"><code>HotModuleReplacementPlugin</code></a> 启用了 <a href="/concepts/hot-module-replacement">Hot Module Replacement</a>, 则它的接口将被暴露在 <a href="/api/module-variables/#modulehot-webpack-specific"><code>module.hot</code> 属性</a> 下面。通常，用户先要检查这个接口是否可访问, 再使用它。你可以这样使用 <code>accept</code> 操作一个更新的模块：</p>\n<pre><code class="hljs language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./library.js\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对更新过的 library 模块做些事情...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>支持以下方法……</p>\n<h2 id="模块-api">模块 API<a href="#%E6%A8%A1%E5%9D%97-api" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="accept"><code>accept</code><a href="#accept" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>接受(accept)给定 <code>依赖模块(dependencies)</code> 的更新，并触发一个 <code>回调函数</code> 来响应更新。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  dependencies<span class="token punctuation">,</span> <span class="token comment">// 可以是一个字符串或字符串数组</span>\n  callback <span class="token comment">// 用于在模块更新后触发的函数</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>当使用 ESM <code>import</code> 时，所有从 <code>dependencies</code> 中导入的符号都会自动更新。注意：依赖项字符串必须与 <code>import</code> 中的 <code>from</code> 字符串完全匹配。在某些情况下， 甚至可以省略 <code>callback</code>。在 <code>callback</code> 中使用的 <code>require()</code> 在这里没有任何意义。</p>\n<p>在使用 CommonJS 时，你应该通过 <code>callback</code> 中的 <code>require()</code> 手动更新依赖模块。省略 <code>callback</code> 在这里没有任何意义。</p>\n<h3 id="accept-自身"><code>accept</code> (自身)<a href="#accept-%E8%87%AA%E8%BA%AB" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>接受自身更新。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  errorHandler <span class="token comment">// 在计算新版本时处理错误的函数</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>在此模块或依赖模块更新时，可以在不通知父依赖的情况下，对此模块处理和重新取值。如果此模块没有导出（或以其他方式更新的导出），这是有意义的。</p>\n<p>当执行此模块（或依赖模块）抛出异常时，会触发 <code>errorHandler</code>。</p>\n<h3 id="decline"><code>decline</code><a href="#decline" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>拒绝给定<code>依赖模块</code>的更新，使用 <code>\'decline\'</code> 方法强制更新失败。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span>\n  dependencies <span class="token comment">// 可以是一个字符串或字符串数组</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>将依赖模块标记为不可更新(not-update-able)。在处理「依赖的导出正在更新」或「尚未实现处理」时，这是有意义的。取决于你的 HMR 管理代码，此依赖模块（或其未接受的依赖模块）更新，通常会导致页面被完全重新加载。</p>\n<h3 id="decline-自身"><code>decline</code> (自身)<a href="#decline-%E8%87%AA%E8%BA%AB" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>拒绝自身更新。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>将依赖模块标记为不可更新(not-update-able)。当此模块具有无法避免的外部作用(side-effect)，或者尚未对此模块进行 HMR 处理时，这是有意义的。取决于你的 HMR 管理代码，此依赖模块（或其未接受的依赖模块）更新，通常会导致页面被完全重新加载。</p>\n<h3 id="dispose-or-adddisposehandler"><code>dispose</code> (or <code>addDisposeHandler</code>)<a href="#dispose-or-adddisposehandler" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>添加一个处理函数，在当前模块代码被替换时执行。此函数应该用于移除你声明或创建的任何持久资源。如果要将状态传入到更新过的模块，请添加给定 <code>data</code> 参数。更新后，此对象在更新之后可通过 <code>module.hot.data</code> 调用。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 清理并将 data 传递到更新后的模块...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="invalidate"><code>invalidate</code><a href="#invalidate" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>调用此方法将使当前模块无效，而当前模块将在应用 HMR 更新时进行部署并重新创建。这个模块的更新像冒泡一样，拒绝自身更新。</p>\n<p>在 <code>idle</code> 状态下调用时，将创建一个包含此模块的新 HMR 更新。HMR 将进入 <code>ready</code> 状态。</p>\n<p>在 <code>ready</code> 或 <code>prepare</code> 状态下调用时，此模块将添加到当前 HMR 的更新中。</p>\n<p>在 <code>check</code> 状态期间被调用时，如果有可用更新，则此模块将添加到更新中。如果没有可用的更新，它将创建一个新更新。HMR 将进入 <code>ready</code> 状态。</p>\n<p>在 <code>dispose</code> 或 <code>apply</code> 状态下调用时，HMR 将在退出这些状态后将其拾取。</p>\n<h3 id="用例">用例<a href="#%E7%94%A8%E4%BE%8B" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><strong>Conditional Accepting</strong></p>\n<p>一个模块可以接受一个依赖，但是当依赖的改变无法处理时，可以调用 <code>invalidate</code>：</p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./dep\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> processX<span class="token punctuation">,</span> processY <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'anotherDep\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> oldY <span class="token operator">=</span> y<span class="token punctuation">;</span>\n\n<span class="token function">processX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">processY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./dep\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">!==</span> oldY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 无法处理，冒泡给父级</span>\n    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 可以处理</span>\n  <span class="token function">processX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><strong>Conditional self accept</strong></p>\n<p>模块可以自我接受，但是当更改无法处理时可以使自身失效：</p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> <span class="token constant">VALUE</span> <span class="token operator">=</span> <span class="token string">\'constant\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">VALUE</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data <span class="token operator">&#x26;&#x26;</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token punctuation">.</span>value <span class="token operator">&#x26;&#x26;</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token constant">VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">VALUE</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>Triggering custom HMR updates</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> moduleId <span class="token operator">=</span> <span class="token function">chooseAModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> code <span class="token operator">=</span> __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n__webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">makeChanges</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote class="tip">\n<p>当调用 <code>invalidate</code> 时，将最终调用 <a href="#dispose-or-adddisposehandler"><code>dispose</code></a> 处理函数并填充 <code>module.hot.data</code>。如果未注册 <a href="#dispose-or-adddisposehandler"><code>dispose</code></a> 处理程序, 则将空对象提供给 <code>module.hot.data</code>.</p>\n</blockquote>\n<blockquote class="warning">\n<p>通过一次次的调用 <code>invalidate</code>，不要陷入 <code>invalidate</code> 循环。这将导致栈溢出并且 HMR 进入 <code>fail</code> 状态。</p>\n</blockquote>\n<h3 id="removedisposehandler"><code>removeDisposeHandler</code><a href="#removedisposehandler" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>删除由 <code>dispose</code> 或 <code>addDisposeHandler</code> 添加的回调函数。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeDisposeHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="api-管理">API 管理<a href="#api-%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="status"><code>status</code><a href="#status" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>获取当前模块热替换进程的状态。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回以下字符串之一...</span></code></pre>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>idle<p class="description mobile">该进程正在等待调用 <code>check</code>（见下文）</p></p></div></td>\n<td class="description desktop">该进程正在等待调用 \n<code>check</code>\n（见下文）</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>check<p class="description mobile">该进程正在检查以更新</p></p></div></td>\n<td class="description desktop">该进程正在检查以更新</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>prepare    <p class="description mobile">该进程正在准备更新（例如，下载已更新的模块）</p></p></div></td>\n<td class="description desktop">该进程正在准备更新（例如，下载已更新的模块）</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>ready<p class="description mobile">此更新已准备并可用</p></p></div></td>\n<td class="description desktop">此更新已准备并可用</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>dispose<p class="description mobile">该进程正在调用将被替换模块的 <code>dispose</code> 处理函数</p></p></div></td>\n<td class="description desktop">该进程正在调用将被替换模块的 \n<code>dispose</code>\n 处理函数</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>apply<p class="description mobile">该进程正在调用 <code>accept</code> 处理函数，并重新执行自我接受(self-accepted)的模块</p></p></div></td>\n<td class="description desktop">该进程正在调用 \n<code>accept</code>\n 处理函数，并重新执行自我接受(self-accepted)的模块</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>abort<p class="description mobile">更新已中止，但系统仍处于之前的状态</p></p></div></td>\n<td class="description desktop">更新已中止，但系统仍处于之前的状态</td>\n</tr>\n<tr>\n<td><div class="title"><p>Status</p><p>Description</p></div>\n<div class="content"><p>fail<p class="description mobile">更新已抛出异常，系统状态已被破坏</p></p></div></td>\n<td class="description desktop">更新已抛出异常，系统状态已被破坏</td>\n</tr>\n</tbody>\n</table>\n<h3 id="check"><code>check</code><a href="#check" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>测试所有加载的模块以进行更新，如果有更新，则 <code>apply</code> 它们。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>autoApply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超时的模块...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 捕获错误</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>当被调用时，传递给 <code>apply</code> 方法的 <code>autoApply</code> 参数可以是布尔值，也可以是 <code>options</code>，</p>\n<h3 id="apply"><code>apply</code><a href="#apply" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>继续更新进程（当 <code>module.hot.status() === \'ready\'</code> 时）。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超时的模块...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 捕获错误</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>可选的 <code>options</code> 对象可以包含以下属性：</p>\n<ul>\n<li><code>ignoreUnaccepted</code> (boolean): 忽略对不可接受的模块所做的更改。</li>\n<li><code>ignoreDeclined</code> (boolean): 忽略对已拒绝的模块所做的更改。</li>\n<li><code>ignoreErrored</code> (boolean): 忽略在接受处理程序、错误处理程序以及重新评估模块时抛出的错误。</li>\n<li><code>onDeclined</code> (function(info)): 拒绝模块的通知者。</li>\n<li><code>onUnaccepted</code> (function(info)): 不可接受的模块的通知程序。</li>\n<li><code>onAccepted</code> (function(info)): 可接受模块的通知者。</li>\n<li><code>onDisposed</code> (function(info)): 废弃模块的通知者。</li>\n<li><code>onErrored</code> (function(info)): 错误通知者。</li>\n</ul>\n<p><code>info</code> 参数将是一个包含以下某些值的对象：</p>\n\x3c!-- eslint-skip --\x3e\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'self-declined\'</span> <span class="token operator">|</span> <span class="token string">\'declined\'</span> <span class="token operator">|</span>\n        <span class="token string">\'unaccepted\'</span> <span class="token operator">|</span> <span class="token string">\'accepted\'</span> <span class="token operator">|</span>\n        <span class="token string">\'disposed\'</span> <span class="token operator">|</span> <span class="token string">\'accept-errored\'</span> <span class="token operator">|</span>\n        <span class="token string">\'self-accept-errored\'</span> <span class="token operator">|</span> <span class="token string">\'self-accept-error-handler-errored\'</span><span class="token punctuation">,</span>\n  moduleId<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 有问题的模块。</span>\n  dependencyId<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 对于错误：拥有接受处理程序的模块 ID。</span>\n  chain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 对于拒绝/接受/不接受：传播更新的 `chain`。</span>\n  parentId<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 对于拒绝：下降的父模块 ID。</span>\n  outdatedModules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 对于接受：已过时且将被处置的模块。</span>\n  outdatedDependencies<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对于接受：将处理更新的接受处理程序的位置。</span>\n    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  error<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对于错误：抛出错误</span>\n  originalError<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 对于自我接受错误处理程序错误：</span>\n                                <span class="token comment">// 在错误处理程序尝试处理该模块之前，该模块引发的错误。</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="addstatushandler"><code>addStatusHandler</code><a href="#addstatushandler" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>注册一个函数来监听 <code>status</code> 的变化。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">addStatusHandler</span><span class="token punctuation">(</span>status <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 响应当前状态...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="removestatushandler"><code>removeStatusHandler</code><a href="#removestatushandler" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>移除一个注册的状态处理函数。</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeStatusHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n'}}]);