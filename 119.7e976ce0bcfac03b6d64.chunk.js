(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{411:function(n,s,a){"use strict";a.r(s),s.default='<p>Runs the following loaders in a worker pool.</p>\n<h2 id="install">Install<a href="#install" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev thread-loader</code></pre>\n<h2 id="usage">Usage<a href="#usage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Put this loader in front of other loaders. The following loaders run in a worker pool.</p>\n<p>Loaders running in a worker pool are limited. Examples:</p>\n<ul>\n<li>Loaders cannot emit files.</li>\n<li>Loaders cannot use custom loader API (i. e. by plugins).</li>\n<li>Loaders cannot access the webpack options.</li>\n</ul>\n<p>Each worker is a separate node.js process, which has an overhead of ~600ms. There is also an overhead of inter-process communication.</p>\n<p>Use this loader only for expensive operations!</p>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n          <span class="token comment">// your expensive loader (e.g babel-loader)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p><strong>with options</strong></p>\n<pre><code class="hljs language-js">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n    <span class="token comment">// loaders with equal options will share worker pools</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// the number of spawned workers, defaults to (number of cpus - 1) or</span>\n      <span class="token comment">// fallback to 1 when require(\'os\').cpus() is undefined</span>\n      workers<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// number of jobs a worker processes in parallel</span>\n      <span class="token comment">// defaults to 20</span>\n      workerParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// additional node.js arguments</span>\n      workerNodeArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'--max-old-space-size=1024\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// Allow to respawn a dead worker pool</span>\n      <span class="token comment">// respawning slows down the entire compilation</span>\n      <span class="token comment">// and should be set to false for development</span>\n      poolRespawn<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// timeout for killing the worker processes when idle</span>\n      <span class="token comment">// defaults to 500 (ms)</span>\n      <span class="token comment">// can be set to Infinity for watching builds to keep workers alive</span>\n      poolTimeout<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// number of jobs the poll distributes to the workers</span>\n      <span class="token comment">// defaults to 200</span>\n      <span class="token comment">// decrease of less efficient but more fair distribution</span>\n      poolParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// name of the pool</span>\n      <span class="token comment">// can be used to create different pools with elsewise identical options</span>\n      name<span class="token punctuation">:</span> <span class="token string">"my-pool"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// your expensive loader (e.g babel-loader)</span>\n<span class="token punctuation">]</span></code></pre>\n<p><strong>prewarming</strong></p>\n<p>To prevent the high delay when booting workers it possible to warmup the worker pool.</p>\n<p>This boots the max number of workers in the pool and loads specified modules into the node.js module cache.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> threadLoader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'thread-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nthreadLoader<span class="token punctuation">.</span><span class="token function">warmup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// pool options, like passed to loader options</span>\n  <span class="token comment">// must match loader options to boot the correct pool</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token comment">// modules to load</span>\n  <span class="token comment">// can be any module, i. e.</span>\n  <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'babel-preset-es2015\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="maintainers">Maintainers<a href="#maintainers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n  <tbody>\n    <tr>\n      <td align="center">\n        <a href="https://github.com/sokra">\n          <img width="150" height="150" src="https://github.com/sokra.png?size=150">\n          </br>\n          sokra\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n'}}]);