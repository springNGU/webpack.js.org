(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{383:function(n,s,a){"use strict";a.r(s),s.default='<blockquote class="tip">\n<p>本指南继续沿用 <a href="/guides/getting-started/"><em>起步</em></a> 中的代码示例。</p>\n</blockquote>\n<p><a href="https://www.typescriptlang.org">TypeScript</a> 是 JavaScript 的超集，为其增加了类型系统，可以编译为普通 JavaScript 代码。这篇指南里我们将会学习是如何将 webpack 和 TypeScript 进行集成。</p>\n<h2 id="基础配置">基础配置<a href="#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>首先，执行以下命令安装 TypeScript compiler 和 loader：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-loader</code></pre>\n<p>现在，我们将修改目录结构和配置文件：</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- tsconfig.json</span>\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- index.ts</span>\n  |- /node_modules</code></pre>\n<p><strong>tsconfig.json</strong></p>\n<p>这里我们设置一个基本的配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>查看 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript 官方文档</a> 了解更多关于 <code>tsconfig.json</code> 的配置选项。</p>\n<p>想要了解 webpack 配置的更多信息，请查看 <a href="/concepts/configuration/">配置</a> 概念。</p>\n<p>现在，配置 webpack 处理 TypeScript：</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.ts\'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>这会让 webpack 直接从 <code>./index.ts</code> <em>进入</em>，然后通过 <code>ts-loader</code> <em>加载</em>所有的 <code>.ts</code> 和 <code>.tsx</code> 文件，并且在当前目录<em>输出</em>一个 <code>bundle.js</code> 文件。</p>\n<p>现在让我们改变 <code>lodash</code> 在 <code>./index.ts</code> 文件中的引入，\n因为在 <code>lodash</code> 的定义中没有默认(default)的导出。</p>\n<p><strong>./index.ts</strong></p>\n<pre><code class="hljs language-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n<span class="token inserted">+ import * as _ from \'lodash\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<blockquote class="tip">\n<p>如果想在 TypeScript 中保留如<code>import _ from \'lodash\';</code>的语法被让它作为一种默认的导入方式，需要在文件 <strong>tsconfig.json</strong> 中设置<code>"allowSyntheticDefaultImports" : true</code> 和 <code>"esModuleInterop" : true</code> 。这个是与 TypeScript 相关的配置，在本文档中提及仅供参考。</p>\n</blockquote>\n<h2 id="loader">Loader<a href="#loader" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a></p>\n<p>在本指南中，我们使用 <code>ts-loader</code>，因为它能够很方便地启用额外的 webpack 功能，例如将其他 web 资源导入到项目中。</p>\n<h2 id="source-maps">Source Maps<a href="#source-maps" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>想要了解 source map 的更多信息，请查看 <a href="/guides/development">开发</a> 指南。</p>\n<p>想要启用 source map，我们必须配置 TypeScript，以将内联的 source map 输出到编译后的 JavaScript 文件中。必须在 TypeScript 配置中添加下面这行：</p>\n<p><strong>tsconfig.json</strong></p>\n<pre><code class="hljs language-diff">  {\n    "compilerOptions": {\n      "outDir": "./dist/",\n<span class="token inserted">+     "sourceMap": true,</span>\n      "noImplicitAny": true,\n      "module": "commonjs",\n      "target": "es5",\n      "jsx": "react",\n      "allowJs": true\n    }\n  }</code></pre>\n<p>现在，我们需要告诉 webpack 提取这些 source map，并内联到最终的 bundle 中。</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.ts\',\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n    module: {\n      rules: [\n        {\n          test: /\\.tsx?$/,\n          use: \'ts-loader\',\n          exclude: /node_modules/,\n        },\n      ],\n    },\n    resolve: {\n      extensions: [ \'.tsx\', \'.ts\', \'.js\' ],\n    },\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n  };</code></pre>\n<p>查看 <a href="/configuration/devtool/">devtool</a> 文档以了解更多信息。</p>\n<h2 id="使用第三方类库">使用第三方类库<a href="#%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%BA%93" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>在从 npm 安装 third party library(第三方库) 时，一定要记得同时安装此 library 的类型声明文件(typing definition)。你可以从 <a href="https://microsoft.github.io/TypeSearch/">TypeSearch</a> 中找到并安装这些第三方库的类型声明文件。</p>\n<p>举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令：</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/lodash</code></pre>\n<p>想了解更多，可以查看 <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">这篇文章</a>。</p>\n<h2 id="导入其他资源">导入其他资源<a href="#%E5%AF%BC%E5%85%A5%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>想要在 TypeScript 中使用非代码资源(non-code asset)，我们需要告诉 TypeScript 推断导入资源的类型。在项目里创建一个 <code>custom.d.ts</code> 文件，这个文件用来表示项目中 TypeScript 的自定义类型声明。我们为 <code>.svg</code> 文件设置一个声明：</p>\n<p><strong>custom.d.ts</strong></p>\n<pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>H这里，我们通过指定任何以 <code>.svg</code> 结尾的导入(import)，将 SVG 声明(declare) 为一个新的模块(module)，并将模块的 <code>content</code> 定义为 <code>any</code>。我们可以通过将类型定义为字符串，来更加显式地将它声明为一个 url。同样的概念适用于其他资源，包括 CSS, SCSS, JSON 等。</p>\n<h2 id="构建性能">构建性能<a href="#%E6%9E%84%E5%BB%BA%E6%80%A7%E8%83%BD" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<blockquote class="warning">\n<p>这可能会降低构建性能。</p>\n</blockquote>\n<p>关于构建工具，请查看<a href="/guides/build-performance/">构建性能</a>指南。</p>\n'}}]);