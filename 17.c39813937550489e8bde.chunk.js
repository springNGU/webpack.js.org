(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{304:function(n,o,e){"use strict";e.r(o),o.default='<blockquote class="tip">\n<p>本 API 从 v4.39.0 开始可用</p>\n</blockquote>\n<p>使用 Logger 输出消息是一种向用户展示信息的有效方式。</p>\n<p>Webpack Logger 可以用在 <a href="/loaders/">loader</a> 和 <a href="/api/plugins/#logging">plugin</a>。生成的 Logger 将作为 <a href="/api/stats/">统计信息</a> 的一部分进行输出，并且用户可以在 <a href="/configuration/">webpack 配置文件</a> 中对 Logger 进行配置。</p>\n<p>在 Webpack 中使用自定义 Logger API 的优点：</p>\n<ul>\n<li>可以 <a href="/configuration/stats/#statslogging">配置</a> 日志的展示级别</li>\n<li>日志内容可作为 <code>stats.json</code> 的一部分输出</li>\n<li>统计预设会影响日志的输出</li>\n<li>使用 plugin 可以影响日志的捕获与展示级别</li>\n<li>当使用多个 plugin 和 loader 时，提供更加通用的日志记录解决方案</li>\n<li>基于 Webpack 开发的 CLI、UI 工具等可能会选择不同的方式来展示日志</li>\n<li>Webpack 核心可以触发日志输出，例如：timing data</li>\n</ul>\n<p>通过引入 Webpack Logger API，我们希望统一 Webpack plugins 和 loaders 生成日志的方式，并提供更好的方法来检查构建问题。 集成的 Logging 解决方案可以帮助 plugins 和 loader 的开发人员提升他们的开发经验。同时为非 CLI 形式的 Webpack 解决方案构建铺平了道路，例如 dashboard 或其他 UI。</p>\n<blockquote class="warning">\n<p><strong>避免在日志中输出无效信息！</strong>请记住，多个 plugin 和 loader 经常一起使用。loader 通常处理多个文件，并且每个文件都会调用，所以尽可能选择较低的日志级别以保证 log 的信息量。</p>\n</blockquote>\n<h2 id="logger-methods">Logger methods<a href="#logger-methods" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<ul>\n<li><code>logger.error(...)</code>：用于输出错误信息</li>\n<li><code>logger.warn(...)</code>：用于输出警告信息</li>\n<li><code>logger.info(...)</code>：用于输出<strong>重要</strong>信息。默认情况下会显示这些信息，所以仅用于输出用户真正需要查看的消息</li>\n<li><code>logger.log(...)</code>：用于输出<strong>不重要</strong>的信息。只有当用户选择查看时，才会显示</li>\n<li><code>logger.debug(...)</code>：用于输出调试信息。只有当用户选择查看特定模块的调试日志时，才会显示</li>\n<li><code>logger.trace()</code>：显示堆栈跟踪信息，展示形式类似于 <code>logger.debug</code></li>\n<li><code>logger.group(...)</code>：将消息进行分组，展示形式类似于 <code>logger.log</code></li>\n<li><code>logger.groupEnd()</code>：结束消息分组</li>\n<li><code>logger.groupCollapsed(...)</code>：将消息进行分组。默认显示为折叠 <code>logger.log</code> 日志，当日志记录级别设置为 <code>\'verbose\'</code> 或 <code>\'debug\'</code> 时，显示展开的日志</li>\n<li><code>logger.status</code>：写入一条临时消息，并且设置新状态，覆盖上一个状态</li>\n<li><code>logger.clear()</code>：打印水平线。展示形式类似于 <code>logger.log</code></li>\n<li><code>logger.profile(...)</code>，<code>logger.profileEnd(...)</code>：捕获配置文件。当支持 <code>console.profile</code> API 时，使用其进行输出</li>\n</ul>\n<h2 id="runtime-logger-api">Runtime Logger API<a href="#runtime-logger-api" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Runtime logger API 仅应该用作开发工具，不应该包含在 <a href="/configuration/mode/#mode-production">生产模式</a>中。</p>\n<ul>\n<li><code>const logging = require(\'webpack/lib/logging/runtime\')</code>：直接从 Webpack 中引入即可使用 logger API</li>\n<li><code>logging.getLogger(\'name\')</code>：根据名称获取一个 logger 的实例</li>\n<li><code>logging.configureDefaultLogger(...)</code>：重写 logger 的默认配置</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> logging <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack/lib/logging/runtime\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogging<span class="token punctuation">.</span><span class="token function">configureDefaultLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  level<span class="token punctuation">:</span> <span class="token string">\'log\'</span><span class="token punctuation">,</span>\n  debug<span class="token punctuation">:</span> <span class="token regex">/something/</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<ul>\n<li><code>logging.hooks.log</code>：向 logger 中添加 Plugins</li>\n</ul>\n'}}]);